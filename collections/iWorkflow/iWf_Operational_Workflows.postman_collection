{
	"variables": [],
	"info": {
		"name": "iWf_Operational_Workflows",
		"_postman_id": "a2d20bd0-cc7f-6f9c-d00e-3792b09a187c",
		"description": "",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json"
	},
	"item": [
		{
			"name": "1A_Discover_BIGIP",
			"description": "Discover an F5 BIG-IP Device on iWorkflow\n\nInput Variables:\nbigip_mgmt\t\t\t\tBIG-IP Management Address\nbigip_root_username\t\tRoot Username\nbigip_root_password\t\tRoot Password\nbigip_admin_username\tAdmin Username\nbigip_admin_password\tAdmin Password\n\nOutput Variables:\niwf_bigip_uuid\tUUID of the discovered device",
			"item": [
				{
					"name": "Discover BIG-IP on iWorkflow",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"eval(postman.getGlobalVariable(\"_f5_workflow_functions\"));",
									"",
									"var populate_vars = [",
									"        { ",
									"            \"name\":\"iwf_bigip_uuid\",",
									"            \"value\":\"uuid\"",
									"        }",
									"    ];",
									"",
									"f5_populate_env_vars(populate_vars);"
								]
							}
						}
					],
					"request": {
						"url": "https://{{iwf_mgmt}}/mgmt/shared/resolver/device-groups/cm-cloud-managed-devices/devices",
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							},
							{
								"key": "X-F5-Auth-Token",
								"value": "{{iwf_token}}",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"address\":\"{{bigip_mgmt}}\",\n    \"automaticallyUpdateFramework\":true,\n    \"properties\": {\n        \"isRestProxyEnabled\":true,\n        \"isSoapProxyEnabled\":true, \n        \"isTmshProxyEnabled\":false,\n        \"dmaConfigPathScope\":\"basic\"\n    },\n    \"rootUser\":\"{{bigip_root_username}}\",\n    \"rootPassword\":\"{{bigip_root_password}}\",\n    \"userName\":\"{{bigip_admin_username}}\",\n    \"password\":\"{{bigip_admin_password}}\"\n}"
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "Get BIG-IP Discovery Status",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"eval(postman.getGlobalVariable(\"_f5_workflow_functions\"));",
									"",
									"f5_enable_poller();",
									"",
									"var check_vals = [",
									"    {",
									"        \"path\":\"state\",",
									"        \"value\":\"ACTIVE\"",
									"    }",
									"    ];",
									"",
									"f5_check_response(check_vals);",
									"f5_poll_until_all_tests_pass(\"\");",
									""
								]
							}
						}
					],
					"request": {
						"url": "https://{{iwf_mgmt}}/mgmt/shared/resolver/device-groups/cm-cloud-managed-devices/devices/{{iwf_bigip_uuid}}",
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							},
							{
								"key": "X-F5-Auth-Token",
								"value": "{{iwf_token}}",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"description": "Wait for attribute state to be ACTIVE"
					},
					"response": []
				},
				{
					"name": "_F5_POLL_DELAY",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"eval(postman.getGlobalVariable(\"_f5_workflow_functions\"));",
									"f5_poll_next();",
									""
								]
							}
						}
					],
					"request": {
						"url": "{{_f5_poll_apiurl}}/{{_f5_poll_wait}}",
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"description": ""
					},
					"response": []
				}
			]
		},
		{
			"name": "1B_Get_BIGIP_UUID",
			"description": "Resolve the UUID of a BIG-IP device discovered on iWorkflow by the Management IP or Hostname\n\nInput Variables:\nbigip_mgmt\t\tManagement IP to search for\nbigip_hostname\tHostname to search for\n\nOutput Variables:\niwf_bigip_uuid\tUUID of the device",
			"item": [
				{
					"name": "Get BIG-IP UUID",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"eval(postman.getGlobalVariable(\"_f5_workflow_functions\"));",
									"",
									"var check_vals = [",
									"    {",
									"        \"path\":\"totalItems\",",
									"        \"value\":1",
									"    }",
									"    ];",
									"",
									"var populate_vars = [",
									"    {",
									"        \"name\":\"iwf_bigip_uuid\",",
									"        \"value\":\"items.0.uuid\"",
									"    }]",
									"    ",
									"f5_check_response(check_vals);",
									"f5_populate_env_vars(populate_vars);"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"// Build filter",
									"var filter = [];",
									"if(environment.bigip_mgmt.length > 0) {",
									"    filter.push(\"(managementAddress eq '\" + environment.bigip_mgmt + \"')\");",
									"}",
									"",
									"if(environment.bigip_hostname.length > 0) {",
									"    filter.push(\"(hostname eq '\" + environment.bigip_hostname + \"')\");",
									"}",
									"",
									"postman.setEnvironmentVariable(\"_rt_filter\", filter.join(\" or \"));",
									""
								]
							}
						}
					],
					"request": {
						"url": "https://{{iwf_mgmt}}/mgmt/shared/resolver/device-groups/cm-cloud-managed-devices/devices?$filter={{_rt_filter}}",
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							},
							{
								"key": "X-F5-Auth-Token",
								"value": "{{iwf_token}}",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"description": ""
					},
					"response": []
				}
			]
		},
		{
			"name": "1C_Delete_BIGIP",
			"description": "Remove a discovered BIG-IP device from iWorkflow\n\nInput Variables:\niwf_bigip_uuid\t\tUUID of the discoverd BIG-IP device\n\n",
			"item": [
				{
					"name": "Remove  BIG-IP from iWorkflow",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"eval(postman.getGlobalVariable(\"_f5_workflow_functions\"));",
									"",
									"var check_vals = [",
									"        { ",
									"            \"path\":\"uuid\",",
									"            \"value\":environment.iwf_bigip_uuid",
									"        }",
									"    ];",
									"",
									"f5_check_response(check_vals);"
								]
							}
						}
					],
					"request": {
						"url": "https://{{iwf_mgmt}}/mgmt/shared/resolver/device-groups/cm-cloud-managed-devices/devices/{{iwf_bigip_uuid}}",
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							},
							{
								"key": "X-F5-Auth-Token",
								"value": "{{iwf_token}}",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"description": ""
					},
					"response": []
				}
			]
		},
		{
			"name": "2A_Create_BIGIP_Connector",
			"description": "Create a BIG-IP Connector\n\nInput Variables:\niwf_connector_name\t\t\tConnector Name\niwf_connector_description\tConnector Description\niwf_bigip_<x>_uuid\t\t\t[OPTIONAL] BIGIP UUID to assign\n\nOutput Variables:\niwf_connector_uuid\t\t\tUUID of the created connector",
			"item": [
				{
					"name": "Create a BIG-IP Connector",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"eval(postman.getGlobalVariable(\"_f5_workflow_functions\"));",
									"",
									"var populate_vars = [",
									"        { ",
									"            \"name\":\"iwf_connector_uuid\",",
									"            \"value\":\"connectorId\"",
									"        }",
									"    ];",
									"",
									"f5_populate_env_vars(populate_vars);",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var uuids = [];",
									"Object.keys(environment).forEach(function(v) {",
									"    if(v.match(/iwf_bigip_.*_uuid/)) {",
									"        uuids.push({\"link\":\"https://localhost/mgmt/shared/resolver/device-groups/cm-cloud-managed-devices/devices/\" + environment[v]});",
									"    }",
									"});",
									"",
									"postman.setEnvironmentVariable(\"_rt_connector_devices\", JSON.stringify(uuids));",
									""
								]
							}
						}
					],
					"request": {
						"url": "https://{{iwf_mgmt}}/mgmt/cm/cloud/connectors/local",
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							},
							{
								"key": "X-F5-Auth-Token",
								"value": "{{iwf_token}}",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\":\"{{iwf_connector_name}}\",\n    \"description\":\"{{iwf_connector_description}}\",\n    \"parameters\":[],\n    \"deviceReferences\": {{_rt_connector_devices}}\n}"
						},
						"description": ""
					},
					"response": []
				}
			]
		},
		{
			"name": "2C_Delete_BIGIP_Connector",
			"description": "Delete a BIG-IP Connector using the Connector UUID\n\nInput Variables:\niwf_connector_uuid\t\tConnector UUID\n\nOutput Variables:\n",
			"item": [
				{
					"name": "Delete a BIG-IP Connector",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"eval(postman.getGlobalVariable(\"_f5_workflow_functions\"));",
									"",
									"var check_vals = [",
									"        { ",
									"            \"path\":\"connectorId\",",
									"            \"value\":environment.iwf_connector_uuid",
									"        }",
									"    ];",
									"",
									"f5_check_response(check_vals);"
								]
							}
						}
					],
					"request": {
						"url": "https://{{iwf_mgmt}}/mgmt/cm/cloud/connectors/local/{{iwf_connector_uuid}}",
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							},
							{
								"key": "X-F5-Auth-Token",
								"value": "{{iwf_token}}",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"description": ""
					},
					"response": []
				}
			]
		},
		{
			"name": "3A_Create_Tenant",
			"description": "Create an iWorkflow Tenant\n\nInput Variables:\niwf_tenant_name\t\t\tTenant Name\niwf_tenant_description\tTenant Description\niwf_connector_uuid*\t\tConnector reference(s)\n\nOutput Variables:\niwf_tenant_roleref\t\tTenant RBAC Role Reference\n",
			"item": [
				{
					"name": "Create iWorkflow Tenant",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"eval(postman.getGlobalVariable(\"_f5_workflow_functions\"));",
									"",
									"var fixup_ref = function(resp) {",
									"    return resp.roleReference.link.replace('https://localhost','');",
									"}",
									"",
									"var populate_vars = [",
									"        { ",
									"            \"name\":\"iwf_tenant_roleref\",",
									"            \"value\":fixup_ref",
									"        }",
									"    ];",
									"",
									"f5_populate_env_vars(populate_vars);",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var uuids = [];",
									"Object.keys(environment).forEach(function(v) {",
									"    if(v.match(/iwf_connector_uuid.*/)) {",
									"        uuids.push({\"link\":\"https://localhost/mgmt/cm/cloud/connectors/local/\" + environment[v]});",
									"    }",
									"});",
									"",
									"postman.setEnvironmentVariable(\"_rt_tenant_connectors\", JSON.stringify(uuids));",
									""
								]
							}
						}
					],
					"request": {
						"url": "https://{{iwf_mgmt}}/mgmt/cm/cloud/tenants",
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							},
							{
								"key": "X-F5-Auth-Token",
								"value": "{{iwf_token}}",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"{{iwf_tenant_name}}\",\n\t\"cloudConnectorReferences\": {{_rt_tenant_connectors}},\n\t\"description\": \"{{iwf_tenant_description}}\",\n\t\"addressContact\": \"\",\n\t\"phone\": \"\",\n\t\"email\": \"\"\n}"
						},
						"description": ""
					},
					"response": []
				}
			]
		},
		{
			"name": "3C_Delete_Tenant",
			"description": "Delete an iWorkflow Tenant\n\nInput Variables:\niwf_tenant_name\t\t\tTenant Name\n\nOutput Variables:\n",
			"item": [
				{
					"name": "Delete iWorkflow Tenant",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"eval(postman.getGlobalVariable(\"_f5_workflow_functions\"));",
									"",
									"var check_vals = [",
									"        { ",
									"            \"path\":\"name\",",
									"            \"value\":environment.iwf_tenant_name",
									"        }",
									"    ];",
									"",
									"f5_check_response(check_vals);"
								]
							}
						}
					],
					"request": {
						"url": "https://{{iwf_mgmt}}/mgmt/cm/cloud/tenants/{{iwf_tenant_name}}",
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							},
							{
								"key": "X-F5-Auth-Token",
								"value": "{{iwf_token}}",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"description": ""
					},
					"response": []
				}
			]
		},
		{
			"name": "4A_Create_Tenant_User",
			"description": "Create a user associated with a iWorkflow tenant\n\nInput Variables:\niwf_tenant_name\t\tTenant Name\niwf_tenant_roleref\tTenant RBAC Role Reference\n\nOutput Variables:",
			"item": [
				{
					"name": "Create Tenant User",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"eval(postman.getGlobalVariable(\"_f5_workflow_functions\"));",
									"",
									"var check_vals = [",
									"        { ",
									"            \"name\":\"name\",",
									"            \"value\":environment.iwf_tenant_username",
									"        }",
									"    ];",
									"",
									"f5_check_response(check_vals);"
								]
							}
						}
					],
					"request": {
						"url": "https://{{iwf_mgmt}}/mgmt/shared/authz/users",
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							},
							{
								"key": "X-F5-Auth-Token",
								"value": "{{iwf_token}}",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"{{iwf_tenant_username}}\",\n\t\"displayName\": \"{{iwf_tenant_username}}\",\n\t\"password\": \"{{iwf_tenant_password}}\"\n}"
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "Assign User to Tenat Admin Role",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"eval(postman.getGlobalVariable(\"_f5_workflow_functions\"));",
									"",
									"var check_vals = [",
									"        { ",
									"            \"path\":\"userReferences.0.link\",",
									"            \"value\":\"https://localhost/mgmt/shared/authz/users/\"+environment.iwf_tenant_username",
									"        }",
									"    ];",
									"",
									"f5_check_response(check_vals);",
									""
								]
							}
						}
					],
					"request": {
						"url": "https://{{iwf_mgmt}}/{{iwf_tenant_roleref}}",
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							},
							{
								"key": "X-F5-Auth-Token",
								"value": "{{iwf_token}}",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"userReferences\": [\n\t\t{\n\t\t\t\"link\": \"https://localhost/mgmt/shared/authz/users/{{iwf_tenant_username}}\"\n\t\t}\n\t]\n}"
						},
						"description": ""
					},
					"response": []
				}
			]
		},
		{
			"name": "4C_Delete_Tenant_User",
			"description": "Delete a iWorkflow Tenant User\n\nInput Variables:\niwf_tenant_username\t\tTenant Username\n\nOutput Variables:\n",
			"item": [
				{
					"name": "Delete a Tenant User",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"eval(postman.getGlobalVariable(\"_f5_workflow_functions\"));",
									"",
									"var check_vals = [",
									"        { ",
									"            \"path\":\"name\",",
									"            \"value\":environment.iwf_tenant_username",
									"        }",
									"    ];",
									"",
									"f5_check_response(check_vals);"
								]
							}
						}
					],
					"request": {
						"url": "https://{{iwf_mgmt}}/mgmt/shared/authz/users/{{iwf_tenant_username}}",
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							},
							{
								"key": "X-F5-Auth-Token",
								"value": "{{iwf_token}}",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"description": ""
					},
					"response": []
				}
			]
		},
		{
			"name": "5A_Create_iApp_Template",
			"description": "Create an iApp template on iWorkflow\n\nInput Variables:\niwf_iapp_name\t\tName of the iApp Template\niwf_iapp_template\tThe JSON body of the template\n\nOutput Variables:\n",
			"item": [
				{
					"name": "Install iApp Template",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"eval(postman.getGlobalVariable(\"_f5_workflow_functions\"));",
									"",
									"var check_vals = [",
									"        {",
									"            \"path\":\"name\",",
									"            \"value\":\"/\" + environment.iwf_iapp_name + \".*/i\",",
									"            \"op\":\"regex\"",
									"        }",
									"    ];",
									"",
									"f5_check_response(check_vals);"
								]
							}
						}
					],
					"request": {
						"url": " https://{{iwf_mgmt}}/mgmt/cm/cloud/templates/iapp",
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							},
							{
								"key": "X-F5-Auth-Token",
								"value": "{{iwf_token}}",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{iwf_iapp_template}}"
						},
						"description": ""
					},
					"response": []
				}
			]
		},
		{
			"name": "5B_Delete_iApp_Template",
			"description": "Delete an iApp template on iWorkflow\n\nInput Variables:\niwf_iapp_name\t\tName of the iApp Template\n\nOutput Variables:\n",
			"item": [
				{
					"name": "Delete iApp Template",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"eval(postman.getGlobalVariable(\"_f5_workflow_functions\"));",
									"",
									"var check_vals = [",
									"        { ",
									"            \"path\":\"name\",",
									"            \"value\":environment.iwf_iapp_name",
									"        }",
									"    ];",
									"",
									"f5_check_response(check_vals);"
								]
							}
						}
					],
					"request": {
						"url": " https://{{iwf_mgmt}}/mgmt/cm/cloud/templates/iapp/{{iwf_iapp_name}}",
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							},
							{
								"key": "X-F5-Auth-Token",
								"value": "{{iwf_token}}",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"description": ""
					},
					"response": []
				}
			]
		},
		{
			"name": "6A_Create_Service_Template",
			"description": "Create a Service Template on iWorkflow\n\nInput Variables:\niwf_service_name\t\tName of the Service Template\niwf_service_template\tThe JSON body of the template\n\nOutput Variables:\n",
			"item": [
				{
					"name": "Create Service Template",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"eval(postman.getGlobalVariable(\"_f5_workflow_functions\"));",
									"",
									"var check_vals = [",
									"        {",
									"            \"path\":\"name\",",
									"            \"value\":\"/\" + environment.iwf_service_name + \".*/i\",",
									"            \"op\":\"regex\"",
									"        }",
									"    ];",
									"",
									"f5_check_response(check_vals);"
								]
							}
						}
					],
					"request": {
						"url": "https://{{iwf_mgmt}}/mgmt/cm/cloud/provider/templates/iapp",
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							},
							{
								"key": "X-F5-Auth-Token",
								"value": "{{iwf_token}}",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{iwf_service_template}}"
						},
						"description": ""
					},
					"response": []
				}
			]
		},
		{
			"name": "6B_Delete_Service_Template",
			"description": "Delete a Service Template on iWorkflow\n\nInput Variables:\niwf_service_name\t\tName of Service Template\n\nOutput Variables:\n",
			"item": [
				{
					"name": "Delete Service Template",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"eval(postman.getGlobalVariable(\"_f5_workflow_functions\"));",
									"",
									"var check_vals = [",
									"        { ",
									"            \"path\":\"templateName\",",
									"            \"value\":environment.iwf_service_name",
									"        }",
									"    ];",
									"",
									"f5_check_response(check_vals);"
								]
							}
						}
					],
					"request": {
						"url": "https://{{iwf_mgmt}}/mgmt/cm/cloud/provider/templates/iapp/{{iwf_service_name}}",
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							},
							{
								"key": "X-F5-Auth-Token",
								"value": "{{iwf_token}}",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"description": ""
					},
					"response": []
				}
			]
		},
		{
			"name": "8A_Create_RPM",
			"description": "Create a RPM from a REST Worker repo. \nThe folder containing the worker must be in /var/config/rest/iapps/\n\nthe folder name in /var/config/rest/iapps/ storing the worker must be used as the app_name\n\nthe RPM created will be here: /var/config/rest/iapps/RPMS/\n\nYou MUST MOVE IT MANUALLY HERE to install it: /var/config/rest/downloads/. If you don't move it, you'll get the following security exception\n\nFailed to install /var/config/rest/iapps/RPMS/********** - java.lang.SecurityException: Cannot install RPM from /var/config/rest/iapps/RPMS directory. Only install RPM from /var/config/rest/downloads directory\n\nInput Variables:\napp_name\t\t\t\tname of the RPM to create\niwf_mgmt\t\t\t\tiWorkflow management address\niWorkflow1_Auth_Token\tiWF Auth Token\nretryCounter\t\t\t\tCounter\nretryLimit\t\t\t\t\tMax value of counter\nretryInterval\t\t\t\tInterval between tests in ms\n\nOutput Variables\nrpm_creation_status_id\tID to track RPM creation status\nrpm_name\t\t\t\tname of the RPM created",
			"item": [
				{
					"name": "Create RPM on iWF",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var respData = JSON.parse(responseBody);",
									"",
									"tests[\"response has id: \" +respData.id] = respData.id;",
									"",
									"tests[\"appName is: \" + respData.appName] = respData.appName;",
									"",
									"tests[\"App package version is: \" + respData.packageVersion] = respData.packageVersion;",
									"",
									"tests[\"App package release is: \" + respData.packageRelease] = respData.packageRelease;",
									"",
									"postman.setEnvironmentVariable('rpm_creation_status_id',respData.id);",
									"",
									"var rpm_name = respData.appName + \"-\" +respData.packageVersion + \"-\" + respData.packageRelease +\".noarch\";",
									"",
									"postman.setEnvironmentVariable('rpm_name', rpm_name);",
									"",
									""
								]
							}
						}
					],
					"request": {
						"url": "https://{{iwf_mgmt}}/mgmt/shared/iapp/build-package",
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							},
							{
								"key": "X-F5-Auth-Token",
								"value": "{{iwf_token}}",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n \"appName\": {{app_name}}\n}"
						},
						"description": "the app name used here is the name of the folder for your code in /var/config/rest/iapps"
					},
					"response": []
				},
				{
					"name": "Check RPM creation process",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is: \" + responseCode.code] = responseCode.code === 200;",
									"",
									"var    retryCounter = environment.retryCounter;",
									"var    retryInterval = environment.retryInterval;",
									"var    retryLimit = environment.retryLimit;",
									"",
									"var respData = JSON.parse(responseBody);",
									"",
									"function pausecomp(millis)",
									"{",
									"    var date = new Date();",
									"    var curDate = null;",
									"    do { curDate = new Date(); }",
									"    while(curDate-date < millis);",
									"}",
									"",
									"if ( respData.status != \"FINISHED\") {",
									"    tests[\"retry-counter value is: \" + retryCounter] = retryCounter;",
									"    if ( parseInt(retryCounter) < parseInt(retryLimit))",
									"    {",
									"        tests[\"retry-counter value is: \" + retryCounter] = retryCounter;",
									"        postman.setEnvironmentVariable(\"retryCounter\", parseInt(retryCounter) + 1);",
									"        pausecomp(retryInterval);",
									"        postman.setNextRequest(\"Check RPM creation process\");",
									"    } else",
									"    {",
									"        postman.setEnvironmentVariable(\"retryCounter\", 0);",
									"        console.log(\"Resetting, retry counter to 0\");",
									"        tests[\"Retries Expired\"] = true === false;",
									"}",
									"} else {",
									"    tests[\"Process Status is: \" + respData.status] = respData.status == \"FINISHED\"",
									"}"
								]
							}
						}
					],
					"request": {
						"url": "https://{{iwf_mgmt}}/mgmt/shared/iapp/build-package/{{rpm_creation_status_id}}",
						"method": "GET",
						"header": [
							{
								"key": "X-F5-Auth-Token",
								"value": "{{iwf_token}}",
								"description": ""
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {},
						"description": "Check the status of the RPM creation process"
					},
					"response": []
				}
			]
		},
		{
			"name": "8B_Install_RPM",
			"description": "Install the RPM located in /var/config/rest/downloads/ and will install it. \n\nthe content of the RPM will be installed in /var/config/rest/iapps/ and will overwrite being already there if conflict\n\nInput Variables:\niwf_mgmt\t\t\t\t\tiWorkflow management address\niWorkflow1_Auth_Token\t\tiWF Auth Token\nrpm_name\t\t\t\t\tname of the RPM to install\nretryCounter\t\t\t\tCounter\nretryLimit\t\t\t\t\tMax value of counter\nretryInterval\t\t\t\tInterval between tests in ms\n\nOutput Variables\nrpm_installation_status_id\tID to track install progress",
			"item": [
				{
					"name": "install RPM",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var respData = JSON.parse(responseBody);",
									"",
									"tests[\"response has id: \" +respData.id] = respData.id;",
									"",
									"postman.setEnvironmentVariable('rpm_installation_status_id',respData.id);",
									""
								]
							}
						}
					],
					"request": {
						"url": "https://{{iwf_mgmt}}/mgmt/shared/iapp/package-management-tasks",
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							},
							{
								"key": "X-F5-Auth-Token",
								"value": "{{iwf_token}}",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\"operation\": \"INSTALL\",\r\"packageFilePath\": \"/var/config/rest/downloads/{{rpm_name}}.rpm\"\r}"
						},
						"description": "will install the RPM on iWF. \n\nthe file need to be in /var/config/rest/downloads/ or it will be rejected"
					},
					"response": []
				},
				{
					"name": "Check RPM install process status",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is: \" + responseCode.code] = responseCode.code === 200;",
									"",
									"var    retryCounter = environment.retryCounter;",
									"var    retryInterval = environment.retryInterval;",
									"var    retryLimit = environment.retryLimit;",
									"",
									"var respData = JSON.parse(responseBody);",
									"",
									"function pausecomp(millis)",
									"{",
									"    var date = new Date();",
									"    var curDate = null;",
									"    do { curDate = new Date(); }",
									"    while(curDate-date < millis);",
									"}",
									"",
									"if ( respData.status != \"FINISHED\") {",
									"    tests[\"retry-counter value is: \" + retryCounter] = retryCounter;",
									"    if ( parseInt(retryCounter) < parseInt(retryLimit))",
									"    {",
									"        tests[\"retry-counter value is: \" + retryCounter] = retryCounter;",
									"        postman.setEnvironmentVariable(\"retryCounter\", parseInt(retryCounter) + 1);",
									"        pausecomp(retryInterval);",
									"        postman.setNextRequest(\"Check RPM install process status\");",
									"    } else",
									"    {",
									"        postman.setEnvironmentVariable(\"retryCounter\", 0);",
									"        console.log(\"Resetting, retry counter to 0\");",
									"        tests[\"Retries Expired\"] = true === false;",
									"}",
									"} else {",
									"    tests[\"Process Status is: \" + respData.status] = respData.status == \"FINISHED\"",
									"}"
								]
							}
						}
					],
					"request": {
						"url": "https://{{iwf_mgmt}}/mgmt/shared/iapp/package-management-tasks/{{rpm_installation_status_id}}",
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							},
							{
								"key": "X-F5-Auth-Token",
								"value": "{{iwf_token}}",
								"description": ""
							}
						],
						"body": {},
						"description": ""
					},
					"response": []
				},
				{
					"name": "Check installed RPM",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var respData = JSON.parse(responseBody);",
									"var packageFound = 0;",
									"",
									"for (var i = 0; i < respData.items.length; i++){",
									"    tests[\"Package index \" + i + \" installed: \" + respData.items[i].packageName] = respData.items[i].packageName;",
									"  if (respData.items[i].packageName == environment.rpm_name) {",
									"      packageFound = 1;",
									"  }",
									"  tests[\"package Found: \" + packageFound] = packageFound;",
									"}",
									"",
									"tests[\"Found our package: \" + environment.rpm_name] = packageFound === 1;",
									""
								]
							}
						}
					],
					"request": {
						"url": "https://{{iwf_mgmt}}/mgmt/shared/iapp/global-installed-packages",
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							},
							{
								"key": "X-F5-Auth-Token",
								"value": "{{iwf_token}}",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\"operation\": \"INSTALL\",\n \"packageName\": {{ rpm-path-filename }}\n}"
						},
						"description": "Will list the RPM installed on iWF"
					},
					"response": []
				}
			]
		},
		{
			"name": "8C_Delete_RPM",
			"description": "Delete REST worker that was installed in /var/config/rest/iapps.\n\nInput Variables:\niwf_mgmt\t\t\t\t\tiWorkflow management address\niWorkflow1_Auth_Token\t\tiWF Auth Token\nrpm_name\t\t\t\t\tname of the RPM to install\n\nOutput Variables\nrpm_uninstallation_status_id\tID to track delete progress",
			"item": [
				{
					"name": "Uninstall RPM",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var respData = JSON.parse(responseBody);",
									"",
									"tests[\"response has id: \" +respData.id] = respData.id;",
									"",
									"postman.setEnvironmentVariable('rpm_uninstall_status_id',respData.id);",
									""
								]
							}
						}
					],
					"request": {
						"url": "https://{{iwf_mgmt}}/mgmt/shared/iapp/package-management-tasks",
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							},
							{
								"key": "X-F5-Auth-Token",
								"value": "{{iwf_token}}",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\"operation\": \"UNINSTALL\",\n\"packageName\": {{rpm_name}}\n}"
						},
						"description": "will delete the RPM from iWF"
					},
					"response": []
				},
				{
					"name": "Check uninstall rpm process status",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is: \" + responseCode.code] = responseCode.code === 200;",
									"",
									"var    retryCounter = environment.retryCounter;",
									"var    retryInterval = environment.retryInterval;",
									"var    retryLimit = environment.retryLimit;",
									"",
									"var respData = JSON.parse(responseBody);",
									"",
									"function pausecomp(millis)",
									"{",
									"    var date = new Date();",
									"    var curDate = null;",
									"    do { curDate = new Date(); }",
									"    while(curDate-date < millis);",
									"}",
									"",
									"if ( respData.status != \"FINISHED\") {",
									"    tests[\"retry-counter value is: \" + retryCounter] = retryCounter;",
									"    if ( parseInt(retryCounter) < parseInt(retryLimit))",
									"    {",
									"        tests[\"retry-counter value is: \" + retryCounter] = retryCounter;",
									"        postman.setEnvironmentVariable(\"retryCounter\", parseInt(retryCounter) + 1);",
									"        pausecomp(retryInterval);",
									"        postman.setNextRequest(\"Check uninstall rpm process status\");",
									"    } else",
									"    {",
									"        postman.setEnvironmentVariable(\"retryCounter\", 0);",
									"        console.log(\"Resetting, retry counter to 0\");",
									"        tests[\"Retries Expired\"] = true === false;",
									"}",
									"} else {",
									"    tests[\"Process Status is: \" + respData.status] = respData.status == \"FINISHED\"",
									"}"
								]
							}
						}
					],
					"request": {
						"url": "https://{{iwf_mgmt}}/mgmt/shared/iapp/package-management-tasks/{{rpm_uninstall_status_id}}",
						"method": "GET",
						"header": [
							{
								"key": "X-F5-Auth-Token",
								"value": "{{iwf_token}}",
								"description": ""
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {},
						"description": ""
					},
					"response": []
				}
			]
		},
		{
			"name": "9A_Create_Subscription",
			"description": "Add a subscription on iWorkflow.\n\nInput Variables:\niwf_mgmt\t\t\t\tiWorkflow management address\niwf_token\t\t\t\tiwf Auth token\nsubscription_topic\t\turi to subscribe\nsubscriber\t\t\t\tthe REST Worker subscribing\n\nOutput Variables\nSubscription_Token\t\tSubscription ID",
			"item": [
				{
					"name": "create subscription",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var respData = JSON.parse(responseBody);",
									"",
									"tests[\"response has token: \" +respData.token] = respData.token;",
									"",
									"postman.setEnvironmentVariable('Subscription_Token',respData.token);",
									""
								]
							}
						}
					],
					"request": {
						"url": "https://{{iwf_mgmt}}/mgmt/subscriptions",
						"method": "POST",
						"header": [
							{
								"key": "X-F5-Auth-Token",
								"value": "{{iwf_token}}",
								"description": ""
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\"topic\" : \"{{subscription_topic}}\",\r\"subscriber\": \"{{subscriber}}\"\r}"
						},
						"description": "create a subscription to monitor the deployment of an iApp. if it happens, the subscription will trigger our handler"
					},
					"response": []
				},
				{
					"name": "Check subscription",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var respData = JSON.parse(responseBody);",
									"",
									"tests[\"our subscription details - token: \" + respData.token] = respData.token;",
									"",
									"tests[\"our subscription details - topic: \" + respData.topic] = respData.topic;",
									"",
									"tests[\"our subscription details - subscriber: \" + respData.subscriber] = respData.subscriber;",
									""
								]
							}
						}
					],
					"request": {
						"url": "https://{{iwf_mgmt}}/mgmt/subscriptions/{{Subscription_Token}}",
						"method": "GET",
						"header": [
							{
								"key": "X-F5-Auth-Token",
								"value": "{{iwf_token}}",
								"description": ""
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {},
						"description": ""
					},
					"response": []
				},
				{
					"name": "Check subscription on the relevant uri",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var respData = JSON.parse(responseBody);",
									"",
									"tests[\"response has the following subscribers: \" + respData.subscribers] = respData.subscribers;",
									"",
									""
								]
							}
						}
					],
					"request": {
						"url": "https://{{iwf_mgmt}}/{{subscription_topic}}/subscriptions",
						"method": "GET",
						"header": [
							{
								"key": "X-F5-Auth-Token",
								"value": "{{iwf_token}}",
								"description": ""
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {},
						"description": ""
					},
					"response": []
				}
			]
		},
		{
			"name": "9B_Delete_Subscription",
			"description": "Delete subscription from iWorkflow.\n\nInput Variables:\niwf_mgmt\t\t\t\tiWorkflow management address\niwf_token\t\t\t\tiwf Auth token\nSubscription_Token\t\tSubscription ID \n",
			"item": [
				{
					"name": "Delete subscription",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									""
								]
							}
						}
					],
					"request": {
						"url": "https://{{iwf_mgmt}}/mgmt/subscriptions/{{Subscription_Token}}",
						"method": "DELETE",
						"header": [
							{
								"key": "X-F5-Auth-Token",
								"value": "{{iwf_token}}",
								"description": ""
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {},
						"description": ""
					},
					"response": []
				}
			]
		}
	]
}