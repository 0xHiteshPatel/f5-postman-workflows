{
	"variables": [],
	"info": {
		"name": "F5_Postman_Workflows",
		"_postman_id": "bed163d1-246f-3927-8480-0e8c2b3c0132",
		"description": "",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json"
	},
	"item": [
		{
			"name": "Examples",
			"description": "",
			"item": [
				{
					"name": "Initialize Environment",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"// Include the f5-postman-workflows functions",
									"eval(postman.getGlobalVariable(\"_f5_workflow_functions\"));",
									"",
									"// An empty vars array will result in only the HTTP ",
									"// reponsde code being validated",
									"var vars = [];",
									"f5_check_response(vars);",
									"",
									"// Clear all environment variables that start with the string '_rt_'",
									"f5_clear_runtime_vars();",
									""
								]
							}
						}
					],
					"request": {
						"url": "http://echo.getpostman.com/get",
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							},
							{
								"key": "Authorization",
								"value": "Basic YWRtaW46YWRtaW4=",
								"description": ""
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": []
						},
						"description": "Example to show how to properly intialize an environment before other items are executed.\n"
					},
					"response": []
				},
				{
					"name": "Populate Single Environment Variable from JSON Response",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"// Include the f5-postman-workflows functions",
									"eval(postman.getGlobalVariable(\"_f5_workflow_functions\"));",
									"",
									"// The vars array is used to control how the f5_populate_env_vars()",
									"// function extracts data from the response and populates variables",
									"// In this request we POSTed the text 'THIS_IS_A_TEST'.",
									"//",
									"// The remote service will echo that object in a JSON response",
									"// attribute named 'data'.  f5_populate_env_vars() will check the",
									"// reponse and populate an environment variable with the data",
									"//",
									"// The vars[] Array contains JSON objects with the following schema:",
									"//",
									"//  { ",
									"//    \"name\":<name_of_variable>,",
									"//    \"value\":<attribute name in JSON response>",
									"//  }",
									"//",
									"// It is recommended that runtime variable names that do not need",
									"// to persist are prepended with '_rt_' (runtime) so they can be ",
									"// cleaned up by the f5_clear_runtime_vars() function",
									"var vars = [",
									"        { ",
									"            \"name\":\"_rt_my_variable_name\",",
									"            \"value\":\"data\"",
									"        }",
									"    ];",
									"    ",
									"// Populate the variables",
									"f5_populate_env_vars(vars);",
									""
								]
							}
						}
					],
					"request": {
						"url": "https://echo.getpostman.com/post",
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic YWRtaW46YWRtaW4=",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "THIS_IS_A_TEST"
						},
						"description": "This example shows how to populate a single environment variable from a sample JSON response.\n\nPlease review the Test script comments.  Sending the request will perform the requested actions and populate variables you can review."
					},
					"response": [
						{
							"id": "ad214797-a1a0-4ea8-96ff-7e93dadf2d6f",
							"name": "Example",
							"originalRequest": {
								"url": "https://echo.getpostman.com/post",
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4=",
										"enabled": true,
										"disabled": false
									}
								],
								"body": {
									"mode": "raw",
									"raw": "THIS_IS_A_TEST"
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"_postman_previewtype": "text",
							"header": [
								{
									"key": "Access-Control-Allow-Credentials",
									"value": "",
									"name": "Access-Control-Allow-Credentials",
									"description": ""
								},
								{
									"key": "Access-Control-Allow-Headers",
									"value": "",
									"name": "Access-Control-Allow-Headers",
									"description": ""
								},
								{
									"key": "Access-Control-Allow-Methods",
									"value": "",
									"name": "Access-Control-Allow-Methods",
									"description": ""
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "",
									"name": "Access-Control-Allow-Origin",
									"description": ""
								},
								{
									"key": "Access-Control-Expose-Headers",
									"value": "",
									"name": "Access-Control-Expose-Headers",
									"description": ""
								},
								{
									"key": "Connection",
									"value": "keep-alive",
									"name": "Connection",
									"description": ""
								},
								{
									"key": "Content-Encoding",
									"value": "gzip",
									"name": "Content-Encoding",
									"description": ""
								},
								{
									"key": "Content-Length",
									"value": "368",
									"name": "Content-Length",
									"description": ""
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8",
									"name": "Content-Type",
									"description": ""
								},
								{
									"key": "Date",
									"value": "Thu, 15 Dec 2016 03:11:53 GMT",
									"name": "Date",
									"description": ""
								},
								{
									"key": "ETag",
									"value": "W/\"1fe-yE/JGcxfFPnCx/PcliUxTw\"",
									"name": "ETag",
									"description": ""
								},
								{
									"key": "Server",
									"value": "nginx/1.10.1",
									"name": "Server",
									"description": ""
								},
								{
									"key": "Vary",
									"value": "X-HTTP-Method-Override, Accept-Encoding",
									"name": "Vary",
									"description": ""
								},
								{
									"key": "set-cookie",
									"value": "sails.sid=s%3AKP8SXixFFouPvarXBb3jil3-9fvpih2h.gNgQHGMFp3nmz2WQwa2DEyMc5nJoSf9hNTNvDesQTr0; Path=/; HttpOnly",
									"name": "set-cookie",
									"description": ""
								}
							],
							"cookie": [
								{
									"expires": "Tue Jan 19 2038 03:14:07 GMT-0600 (CST)",
									"httpOnly": true,
									"domain": "echo.getpostman.com",
									"path": "/",
									"secure": false,
									"value": "s%3AKP8SXixFFouPvarXBb3jil3-9fvpih2h.gNgQHGMFp3nmz2WQwa2DEyMc5nJoSf9hNTNvDesQTr0",
									"key": "sails.sid"
								}
							],
							"responseTime": 222,
							"body": "{\"args\":{},\"data\":\"THIS_IS_A_TEST\",\"files\":{},\"form\":{},\"headers\":{\"host\":\"echo.getpostman.com\",\"content-length\":\"14\",\"accept\":\"*/*\",\"accept-encoding\":\"gzip, deflate\",\"authorization\":\"Basic YWRtaW46YWRtaW4=\",\"cache-control\":\"no-cache\",\"content-type\":\"text/plain\",\"cookie\":\"sails.sid=s%3AYyOvszfwHxa0-JOP6uaSBSukgQ2dGnnZ.KrX3OzAeaKtVdXiP7A5fRYlCAlJZxJgqLVC%2B2D0eJyU\",\"user-agent\":\"PostmanRuntime/3.0.5\",\"x-forwarded-port\":\"443\",\"x-forwarded-proto\":\"https\"},\"json\":null,\"url\":\"https://echo.getpostman.com/post\"}"
						}
					]
				},
				{
					"name": "Populate Multiple Environment Variables from JSON Response",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"// Include the f5-postman-workflows functions",
									"eval(postman.getGlobalVariable(\"_f5_workflow_functions\"));",
									"",
									"// Since vars[] is an array we can populate multiple variables ",
									"// from the response",
									"var vars = [",
									"        { ",
									"            \"name\":\"_rt_my_variable_name_1\",",
									"            \"value\":\"data\"",
									"        },",
									"        { ",
									"            \"name\":\"_rt_my_variable_name_2\",",
									"            \"value\":\"url\"",
									"        }",
									"    ",
									"    ];",
									"",
									"// Populate the variables",
									"f5_populate_env_vars(vars);",
									""
								]
							}
						}
					],
					"request": {
						"url": "https://echo.getpostman.com/post",
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic YWRtaW46YWRtaW4=",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "THIS_IS_A_TEST"
						},
						"description": "This example shows how to populate multiple environment variables from a sample JSON response.\n\nPlease review the Test script comments.  Sending the request will perform the requested actions and populate variables you can review."
					},
					"response": [
						{
							"id": "4c48e1fa-7361-48aa-be60-98371fbd08f8",
							"name": "Example",
							"originalRequest": {
								"url": "https://echo.getpostman.com/post",
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4=",
										"enabled": true,
										"disabled": false
									}
								],
								"body": {
									"mode": "raw",
									"raw": "THIS_IS_A_TEST"
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"_postman_previewtype": "text",
							"header": [
								{
									"key": "Access-Control-Allow-Credentials",
									"value": "",
									"name": "Access-Control-Allow-Credentials",
									"description": ""
								},
								{
									"key": "Access-Control-Allow-Headers",
									"value": "",
									"name": "Access-Control-Allow-Headers",
									"description": ""
								},
								{
									"key": "Access-Control-Allow-Methods",
									"value": "",
									"name": "Access-Control-Allow-Methods",
									"description": ""
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "",
									"name": "Access-Control-Allow-Origin",
									"description": ""
								},
								{
									"key": "Access-Control-Expose-Headers",
									"value": "",
									"name": "Access-Control-Expose-Headers",
									"description": ""
								},
								{
									"key": "Connection",
									"value": "keep-alive",
									"name": "Connection",
									"description": ""
								},
								{
									"key": "Content-Encoding",
									"value": "gzip",
									"name": "Content-Encoding",
									"description": ""
								},
								{
									"key": "Content-Length",
									"value": "368",
									"name": "Content-Length",
									"description": ""
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8",
									"name": "Content-Type",
									"description": ""
								},
								{
									"key": "Date",
									"value": "Thu, 15 Dec 2016 03:11:53 GMT",
									"name": "Date",
									"description": ""
								},
								{
									"key": "ETag",
									"value": "W/\"1fe-yE/JGcxfFPnCx/PcliUxTw\"",
									"name": "ETag",
									"description": ""
								},
								{
									"key": "Server",
									"value": "nginx/1.10.1",
									"name": "Server",
									"description": ""
								},
								{
									"key": "Vary",
									"value": "X-HTTP-Method-Override, Accept-Encoding",
									"name": "Vary",
									"description": ""
								},
								{
									"key": "set-cookie",
									"value": "sails.sid=s%3AKP8SXixFFouPvarXBb3jil3-9fvpih2h.gNgQHGMFp3nmz2WQwa2DEyMc5nJoSf9hNTNvDesQTr0; Path=/; HttpOnly",
									"name": "set-cookie",
									"description": ""
								}
							],
							"cookie": [
								{
									"expires": "Tue Jan 19 2038 03:14:07 GMT-0600 (CST)",
									"httpOnly": true,
									"domain": "echo.getpostman.com",
									"path": "/",
									"secure": false,
									"value": "s%3AKP8SXixFFouPvarXBb3jil3-9fvpih2h.gNgQHGMFp3nmz2WQwa2DEyMc5nJoSf9hNTNvDesQTr0",
									"key": "sails.sid"
								}
							],
							"responseTime": 222,
							"body": "{\"args\":{},\"data\":\"THIS_IS_A_TEST\",\"files\":{},\"form\":{},\"headers\":{\"host\":\"echo.getpostman.com\",\"content-length\":\"14\",\"accept\":\"*/*\",\"accept-encoding\":\"gzip, deflate\",\"authorization\":\"Basic YWRtaW46YWRtaW4=\",\"cache-control\":\"no-cache\",\"content-type\":\"text/plain\",\"cookie\":\"sails.sid=s%3AYyOvszfwHxa0-JOP6uaSBSukgQ2dGnnZ.KrX3OzAeaKtVdXiP7A5fRYlCAlJZxJgqLVC%2B2D0eJyU\",\"user-agent\":\"PostmanRuntime/3.0.5\",\"x-forwarded-port\":\"443\",\"x-forwarded-proto\":\"https\"},\"json\":null,\"url\":\"https://echo.getpostman.com/post\"}"
						}
					]
				},
				{
					"name": "Populate Environment Variables using Custom Functions",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"// Include the f5-postman-workflows functions",
									"eval(postman.getGlobalVariable(\"_f5_workflow_functions\"));",
									"",
									"// Define some custom functions to extract the data we want",
									"// The function takes one parameter which includes the full",
									"// JSON response body.  The function should return the value",
									"// to populate or undefined.",
									"",
									"// This function always returns undefined.  Returning undefined",
									"// will result in the associated test item being marked as FAIL",
									"var custom_populate_function_undef = function(json) { return undefined };",
									"",
									"// This function returns the 'json.foo' attribute",
									"var custom_populate_function_simple = function(json) { return json.json.foo };",
									"",
									"// This function checks the length of the array json.data[] and",
									"// returns the last element",
									"var custom_populate_function_advanced = function(json) {",
									"    if('data' in json.json && json.json.data.length === 3) {",
									"        return json.json.data[json.json.data.length - 1];",
									"    }",
									"};",
									"",
									"// This function extracts the hostname from a URL",
									"var custom_populate_function_gethostname = function(json) {",
									"    var matches = json.url.match(/^https?\\:\\/\\/([^\\/?#]+)(?:[\\/?#]|$)/i);",
									"    return matches && matches[1];",
									"}",
									"",
									"// The vars[] array can use variable names that are function definitions",
									"// as the value attribute",
									"var vars = [",
									"        { \"name\":\"_rt_my_var_advanced\",\"value\":custom_populate_function_advanced },",
									"        { \"name\":\"_rt_my_var_simple\",  \"value\":custom_populate_function_simple },",
									"        { \"name\":\"_rt_my_var_undef\",   \"value\":custom_populate_function_undef },",
									"        { \"name\":\"_rt_my_var_url\",     \"value\":\"url\" },",
									"        { \"name\":\"_rt_my_var_hostname\",\"value\":custom_populate_function_gethostname }",
									"    ];",
									"",
									"// Populate the variables",
									"f5_populate_env_vars(vars);",
									""
								]
							}
						}
					],
					"request": {
						"url": "https://echo.getpostman.com/post",
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic YWRtaW46YWRtaW4=",
								"description": ""
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"data\":[1,2,3],\n\t\"foo\":\"bar\"\n}"
						},
						"description": "This example shows how to populate a environment variables from a sample JSON response using a custom function in JavaScript.  \n\nThis functionality is useful when you would like to extract data from complex object definitions in the return JSON schema.  Additionally, manipulation of the data can be performed before the variable is populated.\n\nThe function definition is:\n```\nvar my_function = function(json) {\n  ...\n  return x || undefined;\n}\n```\n\nPlease review the Test script comments.  Sending the request will perform the requested actions and populate variables you can review."
					},
					"response": [
						{
							"id": "a24daddf-47b5-4682-8479-45cbd92f6a1a",
							"name": "Example",
							"originalRequest": {
								"url": "https://echo.getpostman.com/post",
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4=",
										"enabled": true,
										"disabled": false
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"enabled": true,
										"description": "The mime type of this content",
										"disabled": false
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"data\":[1,2,3],\n\t\"foo\":\"bar\"\n}"
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"_postman_previewtype": "text",
							"header": [
								{
									"key": "Access-Control-Allow-Credentials",
									"value": "",
									"name": "Access-Control-Allow-Credentials",
									"description": "Indicates whether or not the response to the request can be exposed when the credentials flag is true. When used as part of a response to a preflight request, this indicates whether or not the actual request can be made using credentials."
								},
								{
									"key": "Access-Control-Allow-Headers",
									"value": "",
									"name": "Access-Control-Allow-Headers",
									"description": "Used in response to a preflight request to indicate which HTTP headers can be used when making the actual request."
								},
								{
									"key": "Access-Control-Allow-Methods",
									"value": "",
									"name": "Access-Control-Allow-Methods",
									"description": "Specifies the method or methods allowed when accessing the resource. This is used in response to a preflight request."
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "",
									"name": "Access-Control-Allow-Origin",
									"description": "Specifies a URI that may access the resource. For requests without credentials, the server may specify '*' as a wildcard, thereby allowing any origin to access the resource."
								},
								{
									"key": "Access-Control-Expose-Headers",
									"value": "",
									"name": "Access-Control-Expose-Headers",
									"description": "Lets a server whitelist headers that browsers are allowed to access."
								},
								{
									"key": "Connection",
									"value": "keep-alive",
									"name": "Connection",
									"description": "Options that are desired for the connection"
								},
								{
									"key": "Content-Encoding",
									"value": "gzip",
									"name": "Content-Encoding",
									"description": "The type of encoding used on the data."
								},
								{
									"key": "Content-Length",
									"value": "372",
									"name": "Content-Length",
									"description": "The length of the response body in octets (8-bit bytes)"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8",
									"name": "Content-Type",
									"description": "The mime type of this content"
								},
								{
									"key": "Date",
									"value": "Thu, 15 Dec 2016 03:34:36 GMT",
									"name": "Date",
									"description": "The date and time that the message was sent"
								},
								{
									"key": "ETag",
									"value": "W/\"226-QDBM7WgjUXJLXHaaiHIm0A\"",
									"name": "ETag",
									"description": "An identifier for a specific version of a resource, often a message digest"
								},
								{
									"key": "Server",
									"value": "nginx/1.10.1",
									"name": "Server",
									"description": "A name for the server"
								},
								{
									"key": "Vary",
									"value": "X-HTTP-Method-Override, Accept-Encoding",
									"name": "Vary",
									"description": "Tells downstream proxies how to match future request headers to decide whether the cached response can be used rather than requesting a fresh one from the origin server."
								},
								{
									"key": "set-cookie",
									"value": "sails.sid=s%3AEvRekIxVtk6YYvKDGwPwjNCRhVi4SpTb.DGkA3ctrgCAph6vexCN2qwf2IRjCzcYEGbfh8cFAU9g; Path=/; HttpOnly",
									"name": "set-cookie",
									"description": "an HTTP cookie"
								}
							],
							"cookie": [
								{
									"expires": "Tue Jan 19 2038 03:14:07 GMT-0600 (CST)",
									"httpOnly": true,
									"domain": "echo.getpostman.com",
									"path": "/",
									"secure": false,
									"value": "s%3AEvRekIxVtk6YYvKDGwPwjNCRhVi4SpTb.DGkA3ctrgCAph6vexCN2qwf2IRjCzcYEGbfh8cFAU9g",
									"key": "sails.sid"
								}
							],
							"responseTime": 380,
							"body": "{\"args\":{},\"data\":{\"data\":[1,2,3],\"foo\":\"bar\"},\"files\":{},\"form\":{},\"headers\":{\"host\":\"echo.getpostman.com\",\"content-length\":\"33\",\"accept\":\"*/*\",\"accept-encoding\":\"gzip, deflate\",\"authorization\":\"Basic YWRtaW46YWRtaW4=\",\"cache-control\":\"no-cache\",\"content-type\":\"application/json\",\"cookie\":\"sails.sid=s%3APC9Ki5XhcyrgOu8ey-vXEsq7ak3Fpgxf.jf68tlmQJehNKAd0uv9dnePx8fiJMVT9D71yPVikPPY\",\"user-agent\":\"PostmanRuntime/3.0.5\",\"x-forwarded-port\":\"443\",\"x-forwarded-proto\":\"https\"},\"json\":{\"data\":[1,2,3],\"foo\":\"bar\"},\"url\":\"https://echo.getpostman.com/post\"}"
						}
					]
				},
				{
					"name": "Check Single Attribute in JSON Response",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"// Include the f5-postman-workflows functions",
									"eval(postman.getGlobalVariable(\"_f5_workflow_functions\"));",
									"",
									"// The vars array is used to control how the f5_check_response()",
									"// function examines data from the response and populates test",
									"// results that indicate success or failure.",
									"//",
									"// In this request we POSTed the JSON object:",
									"//",
									"// { ",
									"//   \"data\":[1,2,3],",
									"//   \"foo\":bar",
									"// }",
									"//",
									"// The remote service will echo that object in a JSON response",
									"// attribute named 'json'.  f5_check_reponse() will check the",
									"// reponse and populate an environment variable with the data",
									"//",
									"// The vars[] Array contains JSON objects with the following schema:",
									"//",
									"//  { ",
									"//    \"name\":<JSON attribute name>,",
									"//    \"value\":<value to check for>",
									"//  }",
									"//",
									"var vars = [",
									"        { \"name\":\"url\", \"value\":\"https://echo.getpostman.com/post\" }",
									"    ];",
									"",
									"// Run the check",
									"f5_check_response(vars);",
									""
								]
							}
						}
					],
					"request": {
						"url": "https://echo.getpostman.com/post",
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic YWRtaW46YWRtaW4=",
								"description": ""
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"data\":[1,2,3],\n\t\"foo\":\"bar\"\n}"
						},
						"description": "This example will show how to check the value of a single attribute in the reponse JSON.\n\nPlease review the Test script comments.  Sending the request will perform the requested actions and populate test results you can review."
					},
					"response": [
						{
							"id": "e17f14fe-f76f-45d3-9145-109dc1e5435a",
							"name": "Example",
							"originalRequest": {
								"url": "https://echo.getpostman.com/post",
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4=",
										"enabled": true,
										"disabled": false
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"enabled": true,
										"description": "The mime type of this content",
										"disabled": false
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"data\":[1,2,3],\n\t\"foo\":\"bar\"\n}"
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"_postman_previewtype": "text",
							"header": [
								{
									"key": "Access-Control-Allow-Credentials",
									"value": "",
									"name": "Access-Control-Allow-Credentials",
									"description": "Indicates whether or not the response to the request can be exposed when the credentials flag is true. When used as part of a response to a preflight request, this indicates whether or not the actual request can be made using credentials."
								},
								{
									"key": "Access-Control-Allow-Headers",
									"value": "",
									"name": "Access-Control-Allow-Headers",
									"description": "Used in response to a preflight request to indicate which HTTP headers can be used when making the actual request."
								},
								{
									"key": "Access-Control-Allow-Methods",
									"value": "",
									"name": "Access-Control-Allow-Methods",
									"description": "Specifies the method or methods allowed when accessing the resource. This is used in response to a preflight request."
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "",
									"name": "Access-Control-Allow-Origin",
									"description": "Specifies a URI that may access the resource. For requests without credentials, the server may specify '*' as a wildcard, thereby allowing any origin to access the resource."
								},
								{
									"key": "Access-Control-Expose-Headers",
									"value": "",
									"name": "Access-Control-Expose-Headers",
									"description": "Lets a server whitelist headers that browsers are allowed to access."
								},
								{
									"key": "Connection",
									"value": "keep-alive",
									"name": "Connection",
									"description": "Options that are desired for the connection"
								},
								{
									"key": "Content-Encoding",
									"value": "gzip",
									"name": "Content-Encoding",
									"description": "The type of encoding used on the data."
								},
								{
									"key": "Content-Length",
									"value": "373",
									"name": "Content-Length",
									"description": "The length of the response body in octets (8-bit bytes)"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8",
									"name": "Content-Type",
									"description": "The mime type of this content"
								},
								{
									"key": "Date",
									"value": "Thu, 15 Dec 2016 03:45:55 GMT",
									"name": "Date",
									"description": "The date and time that the message was sent"
								},
								{
									"key": "ETag",
									"value": "W/\"226-TYkoU6os5RLXREIy5/WWLQ\"",
									"name": "ETag",
									"description": "An identifier for a specific version of a resource, often a message digest"
								},
								{
									"key": "Server",
									"value": "nginx/1.10.1",
									"name": "Server",
									"description": "A name for the server"
								},
								{
									"key": "Vary",
									"value": "X-HTTP-Method-Override, Accept-Encoding",
									"name": "Vary",
									"description": "Tells downstream proxies how to match future request headers to decide whether the cached response can be used rather than requesting a fresh one from the origin server."
								}
							],
							"cookie": [
								{
									"expires": "Tue Jan 19 2038 03:14:07 GMT-0600 (CST)",
									"httpOnly": true,
									"domain": "echo.getpostman.com",
									"path": "/",
									"secure": false,
									"value": "s%3AEvRekIxVtk6YYvKDGwPwjNCRhVi4SpTb.DGkA3ctrgCAph6vexCN2qwf2IRjCzcYEGbfh8cFAU9g",
									"key": "sails.sid"
								}
							],
							"responseTime": 296,
							"body": "{\"args\":{},\"data\":{\"data\":[1,2,3],\"foo\":\"bar\"},\"files\":{},\"form\":{},\"headers\":{\"host\":\"echo.getpostman.com\",\"content-length\":\"33\",\"accept\":\"*/*\",\"accept-encoding\":\"gzip, deflate\",\"authorization\":\"Basic YWRtaW46YWRtaW4=\",\"cache-control\":\"no-cache\",\"content-type\":\"application/json\",\"cookie\":\"sails.sid=s%3AEvRekIxVtk6YYvKDGwPwjNCRhVi4SpTb.DGkA3ctrgCAph6vexCN2qwf2IRjCzcYEGbfh8cFAU9g\",\"user-agent\":\"PostmanRuntime/3.0.5\",\"x-forwarded-port\":\"443\",\"x-forwarded-proto\":\"https\"},\"json\":{\"data\":[1,2,3],\"foo\":\"bar\"},\"url\":\"https://echo.getpostman.com/post\"}"
						}
					]
				},
				{
					"name": "Check Multiple Attributes in JSON Response",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"// Include the f5-postman-workflows functions",
									"eval(postman.getGlobalVariable(\"_f5_workflow_functions\"));",
									"",
									"// Since vars[] is an array we can check multiple variables ",
									"// from the response",
									"var vars = [",
									"        { \"name\":\"data\", \"value\":\"THIS_IS_A_TEST\" },",
									"        { \"name\":\"url\", \"value\":\"https://echo.getpostman.com/post\" }",
									"    ];",
									"",
									"// Run the check",
									"f5_check_response(vars);",
									""
								]
							}
						}
					],
					"request": {
						"url": "https://echo.getpostman.com/post",
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic YWRtaW46YWRtaW4=",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "THIS_IS_A_TEST"
						},
						"description": "This example will show how to check the value of multiple attributes in the reponse JSON.\n\nPlease review the Test script comments.  Sending the request will perform the requested actions and populate test results you can review."
					},
					"response": [
						{
							"id": "57aaf6a0-f09a-4f8e-83fa-a534223bf947",
							"name": "Example",
							"originalRequest": {
								"url": "https://echo.getpostman.com/post",
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4=",
										"enabled": true,
										"disabled": false
									}
								],
								"body": {
									"mode": "raw",
									"raw": "THIS_IS_A_TEST"
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"_postman_previewtype": "text",
							"header": [
								{
									"key": "Access-Control-Allow-Credentials",
									"value": "",
									"name": "Access-Control-Allow-Credentials",
									"description": "Indicates whether or not the response to the request can be exposed when the credentials flag is true. When used as part of a response to a preflight request, this indicates whether or not the actual request can be made using credentials."
								},
								{
									"key": "Access-Control-Allow-Headers",
									"value": "",
									"name": "Access-Control-Allow-Headers",
									"description": "Used in response to a preflight request to indicate which HTTP headers can be used when making the actual request."
								},
								{
									"key": "Access-Control-Allow-Methods",
									"value": "",
									"name": "Access-Control-Allow-Methods",
									"description": "Specifies the method or methods allowed when accessing the resource. This is used in response to a preflight request."
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "",
									"name": "Access-Control-Allow-Origin",
									"description": "Specifies a URI that may access the resource. For requests without credentials, the server may specify '*' as a wildcard, thereby allowing any origin to access the resource."
								},
								{
									"key": "Access-Control-Expose-Headers",
									"value": "",
									"name": "Access-Control-Expose-Headers",
									"description": "Lets a server whitelist headers that browsers are allowed to access."
								},
								{
									"key": "Connection",
									"value": "keep-alive",
									"name": "Connection",
									"description": "Options that are desired for the connection"
								},
								{
									"key": "Content-Encoding",
									"value": "gzip",
									"name": "Content-Encoding",
									"description": "The type of encoding used on the data."
								},
								{
									"key": "Content-Length",
									"value": "367",
									"name": "Content-Length",
									"description": "The length of the response body in octets (8-bit bytes)"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8",
									"name": "Content-Type",
									"description": "The mime type of this content"
								},
								{
									"key": "Date",
									"value": "Thu, 15 Dec 2016 03:49:09 GMT",
									"name": "Date",
									"description": "The date and time that the message was sent"
								},
								{
									"key": "ETag",
									"value": "W/\"200-n96cOwzeh6Q1t3DbFFX0wA\"",
									"name": "ETag",
									"description": "An identifier for a specific version of a resource, often a message digest"
								},
								{
									"key": "Server",
									"value": "nginx/1.10.1",
									"name": "Server",
									"description": "A name for the server"
								},
								{
									"key": "Vary",
									"value": "X-HTTP-Method-Override, Accept-Encoding",
									"name": "Vary",
									"description": "Tells downstream proxies how to match future request headers to decide whether the cached response can be used rather than requesting a fresh one from the origin server."
								}
							],
							"cookie": [
								{
									"expires": "Tue Jan 19 2038 03:14:07 GMT-0600 (CST)",
									"httpOnly": true,
									"domain": "echo.getpostman.com",
									"path": "/",
									"secure": false,
									"value": "s%3Ae7jN5rgvcMYFTX5YMElz691EZ7vT44tG.GfdkgIsvil6laIVr2p%2BAuCcy8mUgY1r%2BFXeXa3NU2gM",
									"key": "sails.sid"
								}
							],
							"responseTime": 287,
							"body": "{\"args\":{},\"data\":\"THIS_IS_A_TEST\",\"files\":{},\"form\":{},\"headers\":{\"host\":\"echo.getpostman.com\",\"content-length\":\"14\",\"accept\":\"*/*\",\"accept-encoding\":\"gzip, deflate\",\"authorization\":\"Basic YWRtaW46YWRtaW4=\",\"cache-control\":\"no-cache\",\"content-type\":\"text/plain\",\"cookie\":\"sails.sid=s%3Ae7jN5rgvcMYFTX5YMElz691EZ7vT44tG.GfdkgIsvil6laIVr2p%2BAuCcy8mUgY1r%2BFXeXa3NU2gM\",\"user-agent\":\"PostmanRuntime/3.0.5\",\"x-forwarded-port\":\"443\",\"x-forwarded-proto\":\"https\"},\"json\":null,\"url\":\"https://echo.getpostman.com/post\"}"
						}
					]
				},
				{
					"name": "Check Attributes using Custom Functions",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"// Include the f5-postman-workflows functions",
									"eval(postman.getGlobalVariable(\"_f5_workflow_functions\"));",
									"",
									"",
									"",
									"// This function returns the 'json.foo' attribute",
									"",
									"// This function checks the length of the array json.data[] and",
									"// returns the last element",
									"",
									"// This function extracts the hostname from a URL",
									"",
									"// The vars[] array can use variable names that are function definitions",
									"// as the value attribute",
									"",
									"// Define some custom functions to check the data we want",
									"// The function takes one parameter which includes the full",
									"// JSON response body.  The function should return 0 to ",
									"// indicate a failed check or >= 1 to indicate success",
									"",
									"",
									"// This function always returns 0.  Returning 0 will result ",
									"// in the associated test item being marked as FAIL",
									"var custom_check_function_fail = function(json) { return 0 };",
									"",
									"// This function always returns 1.  Returning 1 will result ",
									"// in the associated test item being marked as PASS",
									"var custom_check_function_pass = function(json) { return 1 };",
									"",
									"// This function checks that the attribute 'data' is present",
									"// in the response JSON",
									"var custom_check_function_simple = function(json) { return 'data' in json };",
									"",
									"// This function checks the following:",
									"//  - Attribute 'data' is present",
									"//  - Attribute 'foo' is present",
									"//  - json.data[] array has 3 elements",
									"//  - json.foo == \"bar\"",
									"var custom_check_function_advanced = function(json) { ",
									"    return ('data' in json.json && ",
									"            'foo' in json.json &&",
									"            json.json.data.length === 3 &&",
									"            json.json.foo === 'bar');",
									"};",
									"",
									"var vars = [",
									"        { \"name\":\"data\",                \"value\":custom_check_function_simple },",
									"        { \"name\":\"json_advanced_check\", \"value\":custom_check_function_advanced },",
									"        { \"name\":\"url\",                 \"value\":\"https://echo.getpostman.com/post\" },",
									"        { \"name\":\"form\",                \"value\":custom_check_function_pass },",
									"        { \"name\":\"args\",                \"value\":custom_check_function_fail }",
									"    ];",
									"",
									"// Run the check",
									"f5_check_response(vars);",
									""
								]
							}
						}
					],
					"request": {
						"url": "https://echo.getpostman.com/post",
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic YWRtaW46YWRtaW4=",
								"description": ""
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"data\":[1,2,3],\n\t\"foo\":\"bar\"\n}"
						},
						"description": "This example will show how to check the value of multiple attributes in the reponse JSON using a custom function in JavaScript.\n\nThis functionality is useful when you would like to\nperform complex check on the returned JSON data.\n\nThe function definition is:\n```\nvar my_function = function(json) {\n  ...\n  return 1 || 0;\n}\n```\n\nPlease review the Test script comments.  Sending the request will perform the requested actions and populate test results you can review.\n"
					},
					"response": [
						{
							"id": "c23735fa-e26a-4796-8f94-a3fbc2cc856a",
							"name": "Example",
							"originalRequest": {
								"url": "https://echo.getpostman.com/post",
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4=",
										"enabled": true,
										"disabled": false
									}
								],
								"body": {
									"mode": "raw",
									"raw": "THIS_IS_A_TEST"
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"_postman_previewtype": "text",
							"header": [
								{
									"key": "Access-Control-Allow-Credentials",
									"value": "",
									"name": "Access-Control-Allow-Credentials",
									"description": "Indicates whether or not the response to the request can be exposed when the credentials flag is true. When used as part of a response to a preflight request, this indicates whether or not the actual request can be made using credentials."
								},
								{
									"key": "Access-Control-Allow-Headers",
									"value": "",
									"name": "Access-Control-Allow-Headers",
									"description": "Used in response to a preflight request to indicate which HTTP headers can be used when making the actual request."
								},
								{
									"key": "Access-Control-Allow-Methods",
									"value": "",
									"name": "Access-Control-Allow-Methods",
									"description": "Specifies the method or methods allowed when accessing the resource. This is used in response to a preflight request."
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "",
									"name": "Access-Control-Allow-Origin",
									"description": "Specifies a URI that may access the resource. For requests without credentials, the server may specify '*' as a wildcard, thereby allowing any origin to access the resource."
								},
								{
									"key": "Access-Control-Expose-Headers",
									"value": "",
									"name": "Access-Control-Expose-Headers",
									"description": "Lets a server whitelist headers that browsers are allowed to access."
								},
								{
									"key": "Connection",
									"value": "keep-alive",
									"name": "Connection",
									"description": "Options that are desired for the connection"
								},
								{
									"key": "Content-Encoding",
									"value": "gzip",
									"name": "Content-Encoding",
									"description": "The type of encoding used on the data."
								},
								{
									"key": "Content-Length",
									"value": "367",
									"name": "Content-Length",
									"description": "The length of the response body in octets (8-bit bytes)"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8",
									"name": "Content-Type",
									"description": "The mime type of this content"
								},
								{
									"key": "Date",
									"value": "Thu, 15 Dec 2016 03:49:09 GMT",
									"name": "Date",
									"description": "The date and time that the message was sent"
								},
								{
									"key": "ETag",
									"value": "W/\"200-n96cOwzeh6Q1t3DbFFX0wA\"",
									"name": "ETag",
									"description": "An identifier for a specific version of a resource, often a message digest"
								},
								{
									"key": "Server",
									"value": "nginx/1.10.1",
									"name": "Server",
									"description": "A name for the server"
								},
								{
									"key": "Vary",
									"value": "X-HTTP-Method-Override, Accept-Encoding",
									"name": "Vary",
									"description": "Tells downstream proxies how to match future request headers to decide whether the cached response can be used rather than requesting a fresh one from the origin server."
								}
							],
							"cookie": [
								{
									"expires": "Tue Jan 19 2038 03:14:07 GMT-0600 (CST)",
									"httpOnly": true,
									"domain": "echo.getpostman.com",
									"path": "/",
									"secure": false,
									"value": "s%3Ae7jN5rgvcMYFTX5YMElz691EZ7vT44tG.GfdkgIsvil6laIVr2p%2BAuCcy8mUgY1r%2BFXeXa3NU2gM",
									"key": "sails.sid"
								}
							],
							"responseTime": 287,
							"body": "{\"args\":{},\"data\":\"THIS_IS_A_TEST\",\"files\":{},\"form\":{},\"headers\":{\"host\":\"echo.getpostman.com\",\"content-length\":\"14\",\"accept\":\"*/*\",\"accept-encoding\":\"gzip, deflate\",\"authorization\":\"Basic YWRtaW46YWRtaW4=\",\"cache-control\":\"no-cache\",\"content-type\":\"text/plain\",\"cookie\":\"sails.sid=s%3Ae7jN5rgvcMYFTX5YMElz691EZ7vT44tG.GfdkgIsvil6laIVr2p%2BAuCcy8mUgY1r%2BFXeXa3NU2gM\",\"user-agent\":\"PostmanRuntime/3.0.5\",\"x-forwarded-port\":\"443\",\"x-forwarded-proto\":\"https\"},\"json\":null,\"url\":\"https://echo.getpostman.com/post\"}"
						}
					]
				},
				{
					"name": "Poller Example - Request 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"// Include the f5-postman-workflows functions",
									"eval(postman.getGlobalVariable(\"_f5_workflow_functions\"));",
									"",
									"// We will enable polled mode by setting the global variable.",
									"// This is required when running collections via the Collection",
									"// Runner or Newman.  Toggling this setting to 1 will result",
									"// in all tests being marked successful.  The PASS/FAIL statue",
									"// of the test will conveyed in the test text instead.",
									"//",
									"// This allows clean runs of polled workflows in the Collection",
									"// Runner and Newman",
									"postman.setGlobalVariable(\"_f5_enable_polled_mode\", \"1\");",
									"",
									"// Set the max_tries",
									"postman.setGlobalVariable(\"_f5_poll_max_tries\", \"6\");",
									"",
									"// Wait for 1 second between polls",
									"postman.setGlobalVariable(\"_f5_poll_wait\", \"1\");",
									"",
									"// To implement this example we are sending the value of the",
									"// _f5_poll_iterator variable to the server.  The server then",
									"// echos this back to us.  The _f5_poll_iterator value is",
									"// incremented by one each time the request is sent resulting",
									"// in a running counter.  ",
									"//",
									"// We then use the vars[] array below to check for the value",
									"// of the iterator to be '5'.  The first 4 times the request ",
									"// is sent this results in a failed test.  As a result the ",
									"// _F5_POLL_DELAY item in the collection is executed resulting",
									"// in a delay, then, this request is retried.  Once the iterator",
									"// reaches \"5\" all the tests pass resulting in use moving to the",
									"// next item in the workflow.",
									"var vars = [",
									"        { \"name\":\"data\", \"value\":\"5\" }",
									"    ];",
									"",
									"// Check the response data",
									"f5_check_response(vars);",
									"",
									"// Start the poller.  The argument to the function is the NEXT",
									"// item to execute in the workflow once all tests pass",
									"f5_poll_until_all_tests_pass(\"Poller Example - Request 2\");",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"postman.setGlobalVariable(\"_f5_poll_useinternal\", \"0\");",
									"postman.setGlobalVariable(\"_f5_poll_bypass_timeout\", \"1\");",
									""
								]
							}
						}
					],
					"request": {
						"url": "https://echo.getpostman.com/post",
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{{_f5_poll_iterator}}"
						},
						"description": "This set of items shows how to implement a polled workflow using the framework.\n\nTo achieve the full polled behaviour the collection must be run via the Collection Runner or Newman.  The items can be run manually so the test states can be observed, however, moving to the next item in the workflow is a manual step executed by the user.\n\nThe poller is configured using the following global variables:\n\n - _f5_enabled_polled_mode\n   - Enable/disable polled mode.  Will mark all tests as successful. Pass/fail is state is shown in test name text. |\n - _f5_poll_max_tries\n   - Max number of polls\n - _f5_poll_wait\n   - Time in seconds to wait between polls\n - _f5_poll_useinternal\n   - Use the internal while() loop to sleep **WARNING: this will block the thread**\n\nIt is recommended that the '_F5_POLL_DELAY' item in the collection is used to implement the delay.  An internal mechanism is provided, however, it blocks the execution thread and could result in performance issues.\n\nThe polling mechanism retries a particular request until either all of it's tests pass or the max_tries value is reached."
					},
					"response": [
						{
							"id": "c3a74b27-08ec-4b06-8c52-cfb9113644a5",
							"name": "Example",
							"originalRequest": {
								"url": "https://echo.getpostman.com/post",
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{{_f5_poll_iterator}}"
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"_postman_previewtype": "text",
							"header": [
								{
									"key": "Access-Control-Allow-Credentials",
									"value": "",
									"name": "Access-Control-Allow-Credentials",
									"description": "Indicates whether or not the response to the request can be exposed when the credentials flag is true. When used as part of a response to a preflight request, this indicates whether or not the actual request can be made using credentials."
								},
								{
									"key": "Access-Control-Allow-Headers",
									"value": "",
									"name": "Access-Control-Allow-Headers",
									"description": "Used in response to a preflight request to indicate which HTTP headers can be used when making the actual request."
								},
								{
									"key": "Access-Control-Allow-Methods",
									"value": "",
									"name": "Access-Control-Allow-Methods",
									"description": "Specifies the method or methods allowed when accessing the resource. This is used in response to a preflight request."
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "",
									"name": "Access-Control-Allow-Origin",
									"description": "Specifies a URI that may access the resource. For requests without credentials, the server may specify '*' as a wildcard, thereby allowing any origin to access the resource."
								},
								{
									"key": "Access-Control-Expose-Headers",
									"value": "",
									"name": "Access-Control-Expose-Headers",
									"description": "Lets a server whitelist headers that browsers are allowed to access."
								},
								{
									"key": "Connection",
									"value": "keep-alive",
									"name": "Connection",
									"description": "Options that are desired for the connection"
								},
								{
									"key": "Content-Encoding",
									"value": "gzip",
									"name": "Content-Encoding",
									"description": "The type of encoding used on the data."
								},
								{
									"key": "Content-Length",
									"value": "329",
									"name": "Content-Length",
									"description": "The length of the response body in octets (8-bit bytes)"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8",
									"name": "Content-Type",
									"description": "The mime type of this content"
								},
								{
									"key": "Date",
									"value": "Thu, 15 Dec 2016 04:21:30 GMT",
									"name": "Date",
									"description": "The date and time that the message was sent"
								},
								{
									"key": "ETag",
									"value": "W/\"1c9-kmDdBZkfnHhNi2p87epcgw\"",
									"name": "ETag",
									"description": "An identifier for a specific version of a resource, often a message digest"
								},
								{
									"key": "Server",
									"value": "nginx/1.10.1",
									"name": "Server",
									"description": "A name for the server"
								},
								{
									"key": "Vary",
									"value": "X-HTTP-Method-Override, Accept-Encoding",
									"name": "Vary",
									"description": "Tells downstream proxies how to match future request headers to decide whether the cached response can be used rather than requesting a fresh one from the origin server."
								}
							],
							"cookie": [
								{
									"expires": "Tue Jan 19 2038 03:14:07 GMT-0600 (CST)",
									"httpOnly": true,
									"domain": "echo.getpostman.com",
									"path": "/",
									"secure": false,
									"value": "s%3AxXqDGa_0wqwBPEhb6jc_jJGpTSEvOxTB.okxnMe1egpZJo%2BMu2%2FZmDei7yr1oEJCg7spcfGeUF1g",
									"key": "sails.sid"
								}
							],
							"responseTime": 305,
							"body": "{\"args\":{},\"data\":\"1\",\"files\":{},\"form\":{},\"headers\":{\"host\":\"echo.getpostman.com\",\"content-length\":\"1\",\"accept\":\"*/*\",\"accept-encoding\":\"gzip, deflate\",\"cache-control\":\"no-cache\",\"content-type\":\"text/plain\",\"cookie\":\"sails.sid=s%3AxXqDGa_0wqwBPEhb6jc_jJGpTSEvOxTB.okxnMe1egpZJo%2BMu2%2FZmDei7yr1oEJCg7spcfGeUF1g\",\"user-agent\":\"PostmanRuntime/3.0.5\",\"x-forwarded-port\":\"443\",\"x-forwarded-proto\":\"https\"},\"json\":null,\"url\":\"https://echo.getpostman.com/post\"}"
						}
					]
				},
				{
					"name": "Poller Example - Request 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"// Include the f5-postman-workflows functions",
									"eval(postman.getGlobalVariable(\"_f5_workflow_functions\"));",
									"",
									"// Check the response.  Notice we are not passing a vars[] array",
									"// therefore the function will just check the HTTP response code",
									"f5_check_response();",
									"",
									"// End of the workflow so we set the next request to null to stop",
									"// execution",
									"postman.setNextRequest(null);"
								]
							}
						}
					],
					"request": {
						"url": "https://echo.getpostman.com/get",
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": []
						},
						"description": ""
					},
					"response": [
						{
							"id": "29ba5901-ef9e-4892-bb25-604a99f9ca85",
							"name": "Example",
							"originalRequest": {
								"url": "https://echo.getpostman.com/get",
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"enabled": true,
										"description": "The mime type of this content",
										"disabled": false
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": []
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"_postman_previewtype": "text",
							"header": [
								{
									"key": "Access-Control-Allow-Credentials",
									"value": "",
									"name": "Access-Control-Allow-Credentials",
									"description": "Indicates whether or not the response to the request can be exposed when the credentials flag is true. When used as part of a response to a preflight request, this indicates whether or not the actual request can be made using credentials."
								},
								{
									"key": "Access-Control-Allow-Headers",
									"value": "",
									"name": "Access-Control-Allow-Headers",
									"description": "Used in response to a preflight request to indicate which HTTP headers can be used when making the actual request."
								},
								{
									"key": "Access-Control-Allow-Methods",
									"value": "",
									"name": "Access-Control-Allow-Methods",
									"description": "Specifies the method or methods allowed when accessing the resource. This is used in response to a preflight request."
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "",
									"name": "Access-Control-Allow-Origin",
									"description": "Specifies a URI that may access the resource. For requests without credentials, the server may specify '*' as a wildcard, thereby allowing any origin to access the resource."
								},
								{
									"key": "Access-Control-Expose-Headers",
									"value": "",
									"name": "Access-Control-Expose-Headers",
									"description": "Lets a server whitelist headers that browsers are allowed to access."
								},
								{
									"key": "Connection",
									"value": "keep-alive",
									"name": "Connection",
									"description": "Options that are desired for the connection"
								},
								{
									"key": "Content-Encoding",
									"value": "gzip",
									"name": "Content-Encoding",
									"description": "The type of encoding used on the data."
								},
								{
									"key": "Content-Length",
									"value": "300",
									"name": "Content-Length",
									"description": "The length of the response body in octets (8-bit bytes)"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8",
									"name": "Content-Type",
									"description": "The mime type of this content"
								},
								{
									"key": "Date",
									"value": "Thu, 15 Dec 2016 04:18:35 GMT",
									"name": "Date",
									"description": "The date and time that the message was sent"
								},
								{
									"key": "ETag",
									"value": "W/\"18d-vTErUOawS+zwUx/pAOj0rQ\"",
									"name": "ETag",
									"description": "An identifier for a specific version of a resource, often a message digest"
								},
								{
									"key": "Server",
									"value": "nginx/1.10.1",
									"name": "Server",
									"description": "A name for the server"
								},
								{
									"key": "Vary",
									"value": "Accept-Encoding",
									"name": "Vary",
									"description": "Tells downstream proxies how to match future request headers to decide whether the cached response can be used rather than requesting a fresh one from the origin server."
								}
							],
							"cookie": [
								{
									"expires": "Tue Jan 19 2038 03:14:07 GMT-0600 (CST)",
									"httpOnly": true,
									"domain": "echo.getpostman.com",
									"path": "/",
									"secure": false,
									"value": "s%3AhYZaM17On6aLPsFM6zGWI4gvZ2-vUilT.aELox%2FZEDav8N0%2FqWfRsuanVnGaebUMUYcf6hiwuw6E",
									"key": "sails.sid"
								}
							],
							"responseTime": 299,
							"body": "{\"args\":{},\"headers\":{\"host\":\"echo.getpostman.com\",\"accept\":\"*/*\",\"accept-encoding\":\"gzip, deflate\",\"cache-control\":\"no-cache\",\"content-type\":\"application/json\",\"cookie\":\"sails.sid=s%3AhYZaM17On6aLPsFM6zGWI4gvZ2-vUilT.aELox%2FZEDav8N0%2FqWfRsuanVnGaebUMUYcf6hiwuw6E\",\"user-agent\":\"PostmanRuntime/3.0.5\",\"x-forwarded-port\":\"443\",\"x-forwarded-proto\":\"https\"},\"url\":\"https://echo.getpostman.com/get\"}"
						}
					]
				},
				{
					"name": "_F5_POLL_DELAY",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"eval(postman.getGlobalVariable(\"_f5_workflow_functions\"));",
									"f5_poll_next();",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"eval(postman.getGlobalVariable(\"_f5_workflow_functions\"));",
									"f5_debug('in _F5_POLL_DELAY')"
								]
							}
						}
					],
					"request": {
						"url": "{{_f5_poll_apiurl}}/{{_f5_poll_wait}}",
						"method": "GET",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": []
						},
						"description": "A reference item that implements a delay for the poller.  This item can be copied and modified as needed, however, the Test script must include the following code for the poller to work:\n\n```\neval(postman.getGlobalVariable(\"_f5_workflow_functions\"));\nf5_poll_next();\n```\n"
					},
					"response": []
				}
			]
		},
		{
			"name": "Install",
			"description": "",
			"item": [
				{
					"name": "Install/Upgrade f5-postman-workflows",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var fresh_install = false;",
									"var global_defaults = [",
									"        [\"_f5_debug\"              ,\"1\"],    ",
									"        [\"_f5_enable_polled_mode\" ,\"1\"],",
									"        [\"_f5_poll_max_tries\"     ,\"60\"],",
									"        [\"_f5_poll_wait\"          ,\"5\"],",
									"        [\"_f5_poll_useinternal\"   ,\"0\"],",
									"        [\"_f5_poll_apiurl\"        ,\"http://echo.getpostman.com/delay\"],",
									"        [\"_f5_poll_bypass_timeout\",\"0\"],",
									"        [\"_f5_poll_iterator\"      ,\"1\"],",
									"        [\"_f5_poll_curr\"          ,\"\"],",
									"    ];",
									"    ",
									"var json = JSON.parse(responseBody);",
									"",
									"if (json.compiledCode.length > 0 && json.errors === undefined) {",
									"    for(var i = 0; i < global_defaults.length; i++) {",
									"        if(!(global_defaults[i][0] in globals) || fresh_install) {",
									"            console.log(\"INSTALL: global: \" + global_defaults[i][0] + \"=\" + global_defaults[i][1]);",
									"            postman.setGlobalVariable(global_defaults[i][0], global_defaults[i][1]);",
									"        }",
									"    }",
									"    postman.setGlobalVariable('_f5_workflow_functions', json.compiledCode);",
									"    console.log(\"INSTALL: set _f5_workflow_functions\");",
									"    ",
									"    tests['Install Successful'] = 1;",
									"} else {",
									"    tests['Install Failed'] = 0;",
									"}",
									""
								]
							}
						}
					],
					"request": {
						"url": "http://closure-compiler.appspot.com/compile?code_url=https://raw.githubusercontent.com/0xHiteshPatel/f5-postman-workflows/master/f5_postman_test_functions.js?token=AMb4cqbElUnjuZ3pFTIWbNUzb3xeAiSJks5YWes1wA%3D%3D&compilation_level=SIMPLE_OPTIMIZATIONS&output_format=json&output_info=warnings&output_info=errors&output_info=compiled_code",
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded",
								"description": ""
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": []
						},
						"description": "This request uses Google's Closure Compiler service to GET the latest version of the package from Github, minify it and install it in the '_f5_workflow_functions' global variable\n\nIt will also create global variables for configuration if they don't already exist."
					},
					"response": []
				},
				{
					"name": "Factory Default Install f5-postman-workflows",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var fresh_install = true;",
									"var global_defaults = [",
									"        [\"_f5_debug\"              ,\"1\"],    ",
									"        [\"_f5_enable_polled_mode\" ,\"1\"],",
									"        [\"_f5_poll_max_tries\"     ,\"60\"],",
									"        [\"_f5_poll_wait\"          ,\"5\"],",
									"        [\"_f5_poll_useinternal\"   ,\"0\"],",
									"        [\"_f5_poll_apiurl\"        ,\"http://echo.getpostman.com/delay\"],",
									"        [\"_f5_poll_bypass_timeout\",\"0\"],",
									"        [\"_f5_poll_iterator\"      ,\"1\"],",
									"        [\"_f5_poll_curr\"          ,\"\"],",
									"    ];",
									"    ",
									"var json = JSON.parse(responseBody);",
									"",
									"if (json.compiledCode.length > 0 && json.errors === undefined) {",
									"    for(var i = 0; i < global_defaults.length; i++) {",
									"        if(!(global_defaults[i][0] in globals) || fresh_install) {",
									"            console.log(\"INSTALL: global: \" + global_defaults[i][0] + \"=\" + global_defaults[i][1]);",
									"            postman.setGlobalVariable(global_defaults[i][0], global_defaults[i][1]);",
									"        }",
									"    }",
									"    postman.setGlobalVariable('_f5_workflow_functions', json.compiledCode);",
									"    console.log(\"INSTALL: set _f5_workflow_functions\");",
									"    ",
									"    tests['Install Successful'] = 1;",
									"} else {",
									"    tests['Install Failed'] = 0;",
									"}",
									""
								]
							}
						}
					],
					"request": {
						"url": "http://closure-compiler.appspot.com/compile?code_url=https://raw.githubusercontent.com/0xHiteshPatel/f5-postman-workflows/master/f5_postman_test_functions.js?token=AMb4cqbElUnjuZ3pFTIWbNUzb3xeAiSJks5YWes1wA%3D%3D&compilation_level=SIMPLE_OPTIMIZATIONS&output_format=json&output_info=warnings&output_info=errors&output_info=compiled_code",
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded",
								"description": ""
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": []
						},
						"description": "This request uses Google's Closure Compiler service to GET the latest version of the package from Github, minify it and install it in the '_f5_workflow_functions' global variable\n\nIt will also create global variables for configuration if they don't already exist."
					},
					"response": []
				},
				{
					"name": "Uninstall f5-postman-workflows",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests['Uninstall Successful'] = 1;",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var global_defaults = [",
									"        [\"_f5_enable_polled_mode\" ,\"1\"],",
									"        [\"_f5_poll_max_tries\"     ,\"60\"],",
									"        [\"_f5_poll_wait\"          ,\"5\"],",
									"        [\"_f5_poll_useinternal\"   ,\"0\"],",
									"        [\"_f5_poll_apiurl\"        ,\"http://echo.getpostman.com/delay\"],",
									"        [\"_f5_poll_bypass_timeout\",\"0\"],",
									"        [\"_f5_poll_iterator\"      ,\"1\"],",
									"        [\"_f5_poll_curr\"          ,\"1\"],",
									"        [\"_f5_debug\"              ,\"1\"]   ",
									"    ];",
									"",
									"postman.clearGlobalVariable('_f5_workflow_functions');",
									"console.log(\"UNINSTALL: unset _f5_workflow_functions\");",
									"    ",
									"for(var i = 0; i < global_defaults.length; i++) {",
									"    console.log(\"UNINSTALL: global: \" + global_defaults[i][0]);",
									"    postman.clearGlobalVariable(global_defaults[i][0]);",
									"}"
								]
							}
						}
					],
					"request": {
						"url": "https://echo.getpostman.com/get",
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded",
								"description": ""
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": []
						},
						"description": "This request will remove the package from your system."
					},
					"response": []
				}
			]
		},
		{
			"name": "Tests",
			"description": "This folder contains the test framework.  The items in this collection have builtin test scripts that exercise the functions provided by the extensions.\n\nEach test implements a test state check as the last step of the Postman test script.  To determine actual success/failure of the test the '[Tester] All Tests Passed' test item should be examined.  Both positive and negative tests are performed so it is normal for some tests to fail, however, the above noted test item inidicates ultimate success of failure.\n\nThe test names are structured as follows:\n\n[normal|polled] [test name]\n\nnormal indicates a test run in normal mode\npolled indicates a test run in polled mode\n\n--------------------------\nThe following code is used to determine the final test state and set the 'all_tests_passed' test item accordingly:\n\nf5_test_check(test_state)\n\n-------------------------\nThe following code can be used to quickly generate the test_state object based on the current tests that have run (string dumped to console):\n\nf5_test_state_generate()\n",
			"item": [
				{
					"name": "[normal] 200 Response Code",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"eval(postman.getGlobalVariable(\"_f5_workflow_functions\"));",
									"f5_clear_runtime_vars();",
									"",
									"postman.setGlobalVariable(\"_f5_enable_polled_mode\", \"0\");",
									"",
									"var test_state = [",
									"\t\t['[GET Response Code]=200', 1]",
									"\t];",
									"",
									"f5_check_response_code();",
									"",
									"f5_test_state_generate();",
									"f5_test_check(test_state);",
									""
								]
							}
						}
					],
					"request": {
						"url": "https://echo.getpostman.com/status/200",
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic YWRtaW46YWRtaW4=",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "THIS_IS_A_TEST"
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "[polled] 200 Response Code",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"eval(postman.getGlobalVariable(\"_f5_workflow_functions\"));",
									"f5_clear_runtime_vars();",
									"",
									"postman.setGlobalVariable(\"_f5_enable_polled_mode\", \"1\");",
									"",
									"var test_state = [",
									"\t\t['[Polled][GET Response Code]=200 [PASS]', 1]",
									"\t];",
									"",
									"f5_check_response_code();",
									"",
									"f5_test_state_generate();",
									"f5_test_check(test_state);",
									""
								]
							}
						}
					],
					"request": {
						"url": "https://echo.getpostman.com/status/200",
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic YWRtaW46YWRtaW4=",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "THIS_IS_A_TEST"
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "[normal] 204 Response Code",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"eval(postman.getGlobalVariable(\"_f5_workflow_functions\"));",
									"f5_clear_runtime_vars();",
									"",
									"postman.setGlobalVariable(\"_f5_enable_polled_mode\", \"0\");",
									"",
									"var test_state = [",
									"\t\t['[GET Response Code]=204', 1]",
									"\t];",
									"",
									"f5_check_response_code();",
									"",
									"f5_test_state_generate();",
									"f5_test_check(test_state);",
									""
								]
							}
						}
					],
					"request": {
						"url": "https://echo.getpostman.com/status/204",
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic YWRtaW46YWRtaW4=",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "THIS_IS_A_TEST"
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "[polled] 204 Response Code",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"eval(postman.getGlobalVariable(\"_f5_workflow_functions\"));",
									"f5_clear_runtime_vars();",
									"",
									"postman.setGlobalVariable(\"_f5_enable_polled_mode\", \"1\");",
									"",
									"var test_state = [",
									"\t\t['[Polled][GET Response Code]=204 [PASS]', 1]",
									"\t];",
									"\t",
									"f5_check_response_code();",
									"",
									"f5_test_state_generate();",
									"f5_test_check(test_state);",
									""
								]
							}
						}
					],
					"request": {
						"url": "https://echo.getpostman.com/status/204",
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic YWRtaW46YWRtaW4=",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "THIS_IS_A_TEST"
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "[normal] 404 Response Code",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"eval(postman.getGlobalVariable(\"_f5_workflow_functions\"));",
									"f5_clear_runtime_vars();",
									"",
									"postman.setGlobalVariable(\"_f5_enable_polled_mode\", \"0\");",
									"",
									"var test_state = [",
									"\t\t['[GET Response Code]=404', 0]",
									"\t];",
									"",
									"f5_check_response_code();",
									"",
									"f5_test_state_generate();",
									"f5_test_check(test_state);",
									""
								]
							}
						}
					],
					"request": {
						"url": "https://echo.getpostman.com/status/404",
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic YWRtaW46YWRtaW4=",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "THIS_IS_A_TEST"
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "[polled] 404 Response Code",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"eval(postman.getGlobalVariable(\"_f5_workflow_functions\"));",
									"f5_clear_runtime_vars();",
									"",
									"postman.setGlobalVariable(\"_f5_enable_polled_mode\", \"1\");",
									"",
									"var test_state = [",
									"\t\t['[Polled][GET Response Code]=404 [FAIL]', 1]",
									"\t];",
									"",
									"",
									"f5_check_response_code();",
									"",
									"f5_test_state_generate();",
									"f5_test_check(test_state);",
									""
								]
							}
						}
					],
					"request": {
						"url": "https://echo.getpostman.com/status/404",
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic YWRtaW46YWRtaW4=",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "THIS_IS_A_TEST"
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "[normal] 404 Response Code Override",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"eval(postman.getGlobalVariable(\"_f5_workflow_functions\"));",
									"f5_clear_runtime_vars();",
									"",
									"postman.setGlobalVariable(\"_f5_enable_polled_mode\", \"0\");",
									"",
									"var test_state = [",
									"\t\t['[GET Response Code]=404', 1]",
									"\t];",
									"",
									"f5_check_response_code(1);",
									"",
									"f5_test_state_generate();",
									"f5_test_check(test_state);",
									""
								]
							}
						}
					],
					"request": {
						"url": "https://echo.getpostman.com/status/404",
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic YWRtaW46YWRtaW4=",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "THIS_IS_A_TEST"
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "[polled] 404 Response Code Override",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"eval(postman.getGlobalVariable(\"_f5_workflow_functions\"));",
									"f5_clear_runtime_vars();",
									"",
									"postman.setGlobalVariable(\"_f5_enable_polled_mode\", \"1\");",
									"",
									"var test_state = [",
									"\t\t['[Polled][GET Response Code]=404 [PASS]', 1]",
									"\t];",
									"",
									"f5_check_response_code(1);",
									"",
									"f5_test_state_generate();",
									"f5_test_check(test_state);",
									""
								]
							}
						}
					],
					"request": {
						"url": "https://echo.getpostman.com/status/404",
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic YWRtaW46YWRtaW4=",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "THIS_IS_A_TEST"
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "[normal] 500 Response Code",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"eval(postman.getGlobalVariable(\"_f5_workflow_functions\"));",
									"f5_clear_runtime_vars();",
									"",
									"postman.setGlobalVariable(\"_f5_enable_polled_mode\", \"0\");",
									"",
									"var test_state = [",
									"\t\t['[GET Response Code]=500', 0]",
									"\t];",
									"",
									"f5_check_response_code(1);",
									"",
									"f5_test_state_generate();",
									"f5_test_check(test_state);",
									""
								]
							}
						}
					],
					"request": {
						"url": "https://echo.getpostman.com/status/500",
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic YWRtaW46YWRtaW4=",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "THIS_IS_A_TEST"
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "[polled] 500 Response Code",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"eval(postman.getGlobalVariable(\"_f5_workflow_functions\"));",
									"f5_clear_runtime_vars();",
									"",
									"postman.setGlobalVariable(\"_f5_enable_polled_mode\", \"1\");",
									"",
									"var test_state = [",
									"\t\t['[Polled][GET Response Code]=500 [FAIL]', 1]",
									"\t];",
									"\t",
									"f5_check_response_code(1);",
									"",
									"f5_test_state_generate();",
									"f5_test_check(test_state);",
									""
								]
							}
						}
					],
					"request": {
						"url": "https://echo.getpostman.com/status/500",
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic YWRtaW46YWRtaW4=",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "THIS_IS_A_TEST"
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "[polled] Poller Test 1 - Req 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"eval(postman.getGlobalVariable(\"_f5_workflow_functions\"));",
									"//f5_clear_runtime_vars();",
									"",
									"postman.setGlobalVariable(\"_f5_enable_polled_mode\", \"1\");",
									"postman.setGlobalVariable(\"_f5_poll_max_tries\", \"6\");",
									"postman.setGlobalVariable(\"_f5_poll_wait\", \"1\");",
									"",
									"var vars = [",
									"        { \"name\":\"data\", \"value\":\"5\" }",
									"    ];",
									"",
									"var test_state = [",
									"\t\t['[Polled][POST Response Code]=200 [PASS]', 1],",
									"\t\t['[Polled][Current Value] data=5 [PASS]', 1],",
									"\t\t['[Polled][Check Value] data=5 [PASS]', 1],",
									"\t];",
									"\t",
									"f5_check_response(vars);",
									"f5_poll_until_all_tests_pass(\"[polled] Poller Test 1 - Req 2\");",
									"",
									"f5_test_state_generate();",
									"f5_test_check(test_state);",
									"",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"postman.setGlobalVariable(\"_f5_poll_useinternal\", \"0\");",
									"postman.setGlobalVariable(\"_f5_poll_bypass_timeout\", \"1\");",
									""
								]
							}
						}
					],
					"request": {
						"url": "https://echo.getpostman.com/post",
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{{_f5_poll_iterator}}"
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "[polled] Poller Test 1 - Req 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"eval(postman.getGlobalVariable(\"_f5_workflow_functions\"));",
									"",
									"var test_state = [",
									"\t\t['[Polled][GET Response Code]=200 [PASS]', 1],",
									"\t];",
									"\t",
									"f5_check_response();",
									"",
									"f5_test_state_generate();",
									"f5_test_check(test_state);"
								]
							}
						}
					],
					"request": {
						"url": "https://echo.getpostman.com/get",
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": []
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "[polled] Poller Test 1 - Req 3",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"eval(postman.getGlobalVariable(\"_f5_workflow_functions\"));",
									"",
									"var vars = [",
									"        { \"name\":\"data\", \"value\":\"100\" }",
									"    ];",
									"",
									"",
									"var test_state = [",
									"\t\t['[Polled][POST Response Code]=200 [PASS]', 1],",
									"\t\t['[Polled][Current Value] data=6 [PASS]', 1],",
									"\t\t['[Polled][Check Value] data=100 [FAIL]', 1],",
									"\t\t['[Poller] Max Tries Reached', 0],",
									"\t];",
									"\t",
									"f5_check_response(vars);",
									"f5_poll_until_all_tests_pass('[polled] Poller Test 2 - Req 1');",
									"",
									"f5_test_state_generate();",
									"f5_test_check(test_state);",
									""
								]
							}
						}
					],
					"request": {
						"url": "https://echo.getpostman.com/post",
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{{_f5_poll_iterator}}"
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "[polled] Poller Test 2 - Req 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"eval(postman.getGlobalVariable(\"_f5_workflow_functions\"));",
									"//f5_clear_runtime_vars();",
									"",
									"postman.setGlobalVariable(\"_f5_enable_polled_mode\", \"1\");",
									"postman.setGlobalVariable(\"_f5_poll_max_tries\", \"6\");",
									"postman.setGlobalVariable(\"_f5_poll_wait\", \"1\");",
									"",
									"var vars = [",
									"        { \"name\":\"data\", \"value\":\"5\" }",
									"    ];",
									"",
									"var test_state = [",
									"\t\t['[Polled][POST Response Code]=200 [PASS]', 1],",
									"\t\t['[Polled][Current Value] data=5 [PASS]', 1],",
									"\t\t['[Polled][Check Value] data=10 [PASS]', 1],",
									"\t];",
									"\t",
									"f5_check_response(vars);",
									"",
									"f5_poll_until_all_tests_pass(\"[polled] Poller Test 2 - Req 2\");",
									"",
									"f5_test_state_generate();",
									"f5_test_check(test_state);",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"postman.setGlobalVariable(\"_f5_poll_useinternal\", \"1\");",
									""
								]
							}
						}
					],
					"request": {
						"url": "https://echo.getpostman.com/post",
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{{_f5_poll_iterator}}"
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "[polled] Poller Test 2 - Req 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"eval(postman.getGlobalVariable(\"_f5_workflow_functions\"));",
									"",
									"var test_state = [",
									"\t\t['[Polled][GET Response Code]=200 [PASS]', 1],",
									"\t];",
									"\t",
									"f5_check_response();",
									"",
									"f5_test_state_generate();",
									"f5_test_check(test_state);"
								]
							}
						}
					],
					"request": {
						"url": "https://echo.getpostman.com/get",
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": []
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "[polled] Poller Test 2 - Req 3",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"eval(postman.getGlobalVariable(\"_f5_workflow_functions\"));",
									"",
									"var vars = [",
									"        { \"name\":\"data\", \"value\":\"100\" }",
									"    ];",
									"",
									"",
									"var test_state = [",
									"\t\t['[Polled][POST Response Code]=200 [PASS]', 1],",
									"\t\t['[Polled][Current Value] data=6 [PASS]', 1],",
									"\t\t['[Polled][Check Value] data=100 [FAIL]', 1],",
									"\t\t['[Poller] Max Tries Reached', 0],",
									"\t];",
									"\t",
									"f5_check_response(vars);",
									"f5_poll_until_all_tests_pass('[polled] Exercise check_response()');",
									"",
									"f5_test_state_generate();",
									"f5_test_check(test_state);",
									""
								]
							}
						}
					],
					"request": {
						"url": "https://echo.getpostman.com/post",
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{{_f5_poll_iterator}}"
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "[polled] Exercise check_response()",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"eval(postman.getGlobalVariable(\"_f5_workflow_functions\"));",
									"f5_clear_runtime_vars();",
									"",
									"postman.setGlobalVariable(\"_f5_enable_polled_mode\", \"1\");",
									"",
									"var custom_check_function_fail = function(json) { return 0 };",
									"var custom_check_function_pass = function(json) { return 1 };",
									"var custom_check_function_simple = function(json) { return 'data' in json };",
									"var custom_check_function_advanced = function(json) { ",
									"    return ('data' in json.json && ",
									"            'foo' in json.json &&",
									"            json.json.data.length === 3 &&",
									"            json.json.foo === 'bar');",
									"};",
									"",
									"var check_vars = [",
									"        { \"name\":\"data\",                \"value\":custom_check_function_simple },",
									"        { \"name\":\"json_advanced_check\", \"value\":custom_check_function_advanced },",
									"        { \"name\":\"url\",                 \"value\":\"https://echo.getpostman.com/post\" },",
									"        { \"name\":\"form\",                \"value\":custom_check_function_pass },",
									"        { \"name\":\"args\",                \"value\":custom_check_function_fail },",
									"        { \"name\":\"i_dont_exist\",        \"value\":\"this_should_fail\" }",
									"",
									"    ];",
									"    ",
									"var test_state = [",
									"\t\t['[Cleared Runtime Env Vars]', 1],",
									"\t\t['[Polled][POST Response Code]=200 [PASS]', 1],",
									"\t\t['[Polled][Current Value] data={\"data\":[1,2,3],\"foo\":\"bar\"} [PASS]', 1],",
									"\t\t['[Polled][Check Value] data=[custom function] [PASS]', 1],",
									"\t\t['[Polled][Check Value] json_advanced_check=[custom function] [PASS]', 1],",
									"\t\t['[Polled][Current Value] url=https://echo.getpostman.com/post [PASS]', 1],",
									"\t\t['[Polled][Check Value] url=https://echo.getpostman.com/post [PASS]', 1],",
									"\t\t['[Polled][Current Value] form={} [PASS]', 1],",
									"\t\t['[Polled][Check Value] form=[custom function] [PASS]', 1],",
									"\t\t['[Polled][Current Value] args={} [PASS]', 1],",
									"\t\t['[Polled][Check Value] args=[custom function] [FAIL]', 1],",
									"\t\t['[Polled][Check Value] i_dont_exist=this_should_fail [FAIL]', 1],",
									"\t];",
									"        ",
									"f5_check_response(check_vars);",
									"",
									"f5_test_state_generate();",
									"f5_test_check(test_state);"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"postman.setGlobalVariable(\"_f5_poll_bypass_timeout\", \"0\");",
									""
								]
							}
						}
					],
					"request": {
						"url": "https://echo.getpostman.com/post",
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic YWRtaW46YWRtaW4=",
								"description": ""
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"data\":[1,2,3],\n\t\"foo\":\"bar\"\n}"
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "[polled] Exercise populate_env_vars()",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"eval(postman.getGlobalVariable(\"_f5_workflow_functions\"));",
									"f5_clear_runtime_vars();",
									"",
									"postman.setGlobalVariable(\"_f5_enable_polled_mode\", \"1\");",
									"",
									"var custom_populate_function_undef = function(json) { return undefined };",
									"var custom_populate_function_simple = function(json) { return json.json.foo };",
									"var custom_populate_function_advanced = function(json) {",
									"    if('data' in json.json && json.json.data.length === 3) {",
									"        return json.json.data[json.json.data.length - 1];",
									"    }",
									"};",
									"var custom_populate_function_gethostname = function(json) {",
									"    var matches = json.url.match(/^https?\\:\\/\\/([^\\/?#]+)(?:[\\/?#]|$)/i);",
									"    return matches && matches[1];",
									"};",
									"",
									"var populate_vars = [",
									"        { \"name\":\"_rt_test_populate_advfunc_var\",    \"value\":custom_populate_function_advanced },",
									"        { \"name\":\"_rt_test_populate_simplefunc_var\", \"value\":custom_populate_function_simple },",
									"        { \"name\":\"_rt_test_populate_undeffunc_var\",  \"value\":custom_populate_function_undef },",
									"        { \"name\":\"_rt_test_populate_url_var\",        \"value\":\"url\" },",
									"        { \"name\":\"_rt_test_populate_hostname_var\",   \"value\":custom_populate_function_gethostname },",
									"        { \"name\":\"_rt_test_populate_nonexist_var\",   \"value\":\"i_dont_exist\" }",
									"    ];",
									"",
									"var test_state = [",
									"\t\t['[Cleared Runtime Env Vars]', 1],",
									"\t\t['[Polled][POST Response Code]=200 [PASS]', 1],",
									"\t\t['[Polled][Populate Variable] _rt_test_populate_advfunc_var=3 [PASS]', 1],",
									"\t\t['[Polled][Populate Variable] _rt_test_populate_simplefunc_var=bar [PASS]', 1],",
									"\t\t['[Polled][Populate Variable] _rt_test_populate_undeffunc_var [FAIL]', 1],",
									"\t\t['[Polled][Populate Variable] _rt_test_populate_url_var=https://echo.getpostman.com/post [PASS]', 1],",
									"\t\t['[Polled][Populate Variable] _rt_test_populate_hostname_var=echo.getpostman.com [PASS]', 1],",
									"\t\t['[Polled][Populate Variable] _rt_test_populate_nonexist_var [FAIL]', 1],",
									"\t\t['[Tester] All Env Vars Correct', 1],",
									"\t];",
									"",
									"var var_state = [",
									"        ['_rt_test_populate_advfunc_var', '3'],",
									"        ['_rt_test_populate_simplefunc_var', 'bar'],",
									"        ['_rt_test_populate_undeffunc_var', ''],",
									"        ['_rt_test_populate_url_var', 'https://echo.getpostman.com/post'],",
									"        ['_rt_test_populate_hostname_var', 'echo.getpostman.com']",
									"    ];    ",
									"        ",
									"f5_populate_env_vars(populate_vars);",
									"",
									"tests['[Tester] All Env Vars Correct'] = 1;",
									"for (var i in var_state) {",
									"    if(environment[var_state[i][0]] !== var_state[i][1]) {",
									"        f5_debug('fail ' + var_state[i][0]);",
									"        tests['[Tester] All Env Vars Correct'] = 0;",
									"    }",
									"}",
									"",
									"f5_test_state_generate();",
									"f5_test_check(test_state);"
								]
							}
						}
					],
					"request": {
						"url": "https://echo.getpostman.com/post",
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic YWRtaW46YWRtaW4=",
								"description": ""
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"data\":[1,2,3],\n\t\"foo\":\"bar\"\n}"
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "[normal] Exercise check_response()",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"eval(postman.getGlobalVariable(\"_f5_workflow_functions\"));",
									"f5_clear_runtime_vars();",
									"",
									"postman.setGlobalVariable(\"_f5_enable_polled_mode\", \"0\");",
									"",
									"var custom_check_function_fail = function(json) { return 0 };",
									"var custom_check_function_pass = function(json) { return 1 };",
									"var custom_check_function_simple = function(json) { return 'data' in json };",
									"var custom_check_function_advanced = function(json) { ",
									"    return ('data' in json.json && ",
									"            'foo' in json.json &&",
									"            json.json.data.length === 3 &&",
									"            json.json.foo === 'bar');",
									"};",
									"",
									"var check_vars = [",
									"        { \"name\":\"data\",                \"value\":custom_check_function_simple },",
									"        { \"name\":\"json_advanced_check\", \"value\":custom_check_function_advanced },",
									"        { \"name\":\"url\",                 \"value\":\"https://echo.getpostman.com/post\" },",
									"        { \"name\":\"form\",                \"value\":custom_check_function_pass },",
									"        { \"name\":\"args\",                \"value\":custom_check_function_fail },",
									"        { \"name\":\"i_dont_exist\",        \"value\":\"this_should_fail\" }",
									"",
									"    ];",
									"    ",
									"var test_state = [",
									"\t\t['[Cleared Runtime Env Vars]', 1],",
									"\t\t['[POST Response Code]=200', 1],",
									"\t\t['[Current Value] data={\"data\":[1,2,3],\"foo\":\"bar\"}', 1],",
									"\t\t['[Check Value] data=[custom function]', 1],",
									"\t\t['[Check Value] json_advanced_check=[custom function]', 1],",
									"\t\t['[Current Value] url=https://echo.getpostman.com/post', 1],",
									"\t\t['[Check Value] url=https://echo.getpostman.com/post', true],",
									"\t\t['[Current Value] form={}', 1],",
									"\t\t['[Check Value] form=[custom function]', 1],",
									"\t\t['[Current Value] args={}', 1],",
									"\t\t['[Check Value] args=[custom function]', 0],",
									"\t\t['[Check Value] i_dont_exist=this_should_fail', false],",
									"\t];",
									"        ",
									"f5_check_response(check_vars);",
									"",
									"f5_test_state_generate();",
									"f5_test_check(test_state);"
								]
							}
						}
					],
					"request": {
						"url": "https://echo.getpostman.com/post",
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic YWRtaW46YWRtaW4=",
								"description": ""
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"data\":[1,2,3],\n\t\"foo\":\"bar\"\n}"
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "[normal] Exercise populate_env_vars()",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"eval(postman.getGlobalVariable(\"_f5_workflow_functions\"));",
									"f5_clear_runtime_vars();",
									"",
									"postman.setGlobalVariable(\"_f5_enable_polled_mode\", \"0\");",
									"",
									"var custom_populate_function_undef = function(json) { return undefined };",
									"var custom_populate_function_simple = function(json) { return json.json.foo };",
									"var custom_populate_function_advanced = function(json) {",
									"    if('data' in json.json && json.json.data.length === 3) {",
									"        return json.json.data[json.json.data.length - 1];",
									"    }",
									"};",
									"var custom_populate_function_gethostname = function(json) {",
									"    var matches = json.url.match(/^https?\\:\\/\\/([^\\/?#]+)(?:[\\/?#]|$)/i);",
									"    return matches && matches[1];",
									"}",
									"var populate_vars = [",
									"        { \"name\":\"_rt_test_populate_advfunc_var\",    \"value\":custom_populate_function_advanced },",
									"        { \"name\":\"_rt_test_populate_simplefunc_var\", \"value\":custom_populate_function_simple },",
									"        { \"name\":\"_rt_test_populate_undeffunc_var\",  \"value\":custom_populate_function_undef },",
									"        { \"name\":\"_rt_test_populate_url_var\",        \"value\":\"url\" },",
									"        { \"name\":\"_rt_test_populate_hostname_var\",   \"value\":custom_populate_function_gethostname },",
									"        { \"name\":\"_rt_test_populate_nonexist_var\",   \"value\":\"i_dont_exist\" }",
									"    ];",
									"",
									"var test_state = [",
									"\t\t['[Cleared Runtime Env Vars]', 1],",
									"\t\t['[POST Response Code]=200', 1],",
									"\t\t['[Populate Variable] _rt_test_populate_advfunc_var=3', 1],",
									"\t\t['[Populate Variable] _rt_test_populate_simplefunc_var=bar', 1],",
									"\t\t['[Populate Variable] _rt_test_populate_undeffunc_var', 0],",
									"\t\t['[Populate Variable] _rt_test_populate_url_var=https://echo.getpostman.com/post', 1],",
									"\t\t['[Populate Variable] _rt_test_populate_hostname_var=echo.getpostman.com', 1],",
									"\t\t['[Populate Variable] _rt_test_populate_nonexist_var', 0],",
									"\t\t['[Tester] All Env Vars Correct', 1],",
									"\t];",
									"",
									"var var_state = [",
									"        ['_rt_test_populate_advfunc_var', '3'],",
									"        ['_rt_test_populate_simplefunc_var', 'bar'],",
									"        ['_rt_test_populate_undeffunc_var', ''],",
									"        ['_rt_test_populate_url_var', 'https://echo.getpostman.com/post'],",
									"        ['_rt_test_populate_hostname_var', 'echo.getpostman.com']",
									"    ];    ",
									"        ",
									"f5_populate_env_vars(populate_vars);",
									"",
									"tests['[Tester] All Env Vars Correct'] = 1;",
									"for (var i in var_state) {",
									"    if(environment[var_state[i][0]] !== var_state[i][1]) {",
									"        f5_debug('fail ' + var_state[i][0])",
									"        tests['[Tester] All Env Vars Correct'] = 0;",
									"    }",
									"}",
									"",
									"f5_test_state_generate()",
									"f5_test_check(test_state);"
								]
							}
						}
					],
					"request": {
						"url": "https://echo.getpostman.com/post",
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic YWRtaW46YWRtaW4=",
								"description": ""
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"data\":[1,2,3],\n\t\"foo\":\"bar\"\n}"
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "_F5_POLL_DELAY",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"eval(postman.getGlobalVariable(\"_f5_workflow_functions\"));",
									"f5_poll_next();",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"console.log('in _F5_POLL_DELAY')"
								]
							}
						}
					],
					"request": {
						"url": "{{_f5_poll_apiurl}}/{{_f5_poll_wait}}",
						"method": "GET",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": []
						},
						"description": ""
					},
					"response": []
				}
			]
		}
	]
}